[{"title":"数通期末复习","url":"/2024/11/07/%E6%95%B0%E9%80%9A%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/","content":"<h1 id=\"第-一-章-概述\"><a href=\"#第-一-章-概述\" class=\"headerlink\" title=\"第 一 章 概述\"></a>第 一 章 概述</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>数据通信以数据传输为基础，包括数据传输和数据交换，以及传输前后的数据处理。</p>\n<blockquote>\n<p>数据通信主要是”人-机“ 通信或 ”机-机“ 通信。</p>\n</blockquote>\n<h2 id=\"数据通信系统的组成\"><a href=\"#数据通信系统的组成\" class=\"headerlink\" title=\"数据通信系统的组成\"></a>数据通信系统的组成</h2><p>数据通信系统由若干个子系统组成，以对数据的处理形式可分为以下三种：   </p>\n<ol>\n<li><strong>终端设备子系统</strong>：由数据终端设备及有关的传输控制设备组成。</li>\n<li><strong>数据传输子系统</strong>：由传输信道和两端的数据电路终接设备组成。</li>\n<li><strong>数据处理子系统</strong>：指包括通信控制器在内的电子计算机</li>\n</ol>\n<p>（终端设备子系统有终端+集中器+调制解调器，数据传输子系统有通信网络，数据处理子系统有计算机）</p>\n<h2 id=\"数据通信网络分类\"><a href=\"#数据通信网络分类\" class=\"headerlink\" title=\"数据通信网络分类\"></a>数据通信网络分类</h2><p>按照覆盖的物理范围分类</p>\n<ul>\n<li>广域网：指覆盖范围很广的远程网络，由结点交换机及其连接的线路组成。目前主要采用分组交换技术。</li>\n<li>局域网：指通过通信线路，把较小地域范围内的各种设备连接在一起的通信网络。</li>\n<li>城域网：指覆盖范围界于前两者之间的，面向企业的公用网络。</li>\n</ul>\n<h2 id=\"因特网组成\"><a href=\"#因特网组成\" class=\"headerlink\" title=\"因特网组成\"></a>因特网组成</h2><p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071832338.jpg\" alt=\"QQ图片20241107183204\"><br>核心部分</p>\n<ul>\n<li>因特网的核心部分相当复杂，其中包含着类型、结构完全不同的网络，以及连接这些网络的路由器。</li>\n<li>核心部分由大量的各种网络和连接这些网络的路由器组成，它为周边部分提供连通性和交换服务。</li>\n<li>在核心部分起特殊作用的是<strong>路由器</strong>(router)。路由器是一种专用计算机，它的主要功能是转发接收到的分组，是因特网上实现分组交换(packet switching)的关键部件。</li>\n</ul>\n<p>周边部分</p>\n<ul>\n<li>因特网的周边部分由连接在因特网上的所有主机组成。 </li>\n<li>位于因特周边部分任何两台主机之间的通信，实际上是指：“主机A的某个进程和主机B上的另一个进程进行通信”。通常把这些主机称为<strong>端系统（end system）</strong>。</li>\n<li>端系统之间的通信有两种模式：<br>  ⑴客户&#x2F;服务器模式(Client&#x2F;Server model)<br>  ⑵对等模式(Peer-to-Peer)</li>\n</ul>\n<h2 id=\"客户-服务器模式\"><a href=\"#客户-服务器模式\" class=\"headerlink\" title=\"客户&#x2F;服务器模式\"></a>客户&#x2F;服务器模式</h2><p>客户和服务器是指通信过程中所涉及的两个应用进程。<br>C&#x2F;S模式描述了两者之间的服务和被服务的关系，是因特网最常用的通信模式。<br>客户&#x2F;服务器模式的两个特点：不对等服务；通信完全异步</p>\n<ul>\n<li>客户&#x2F;服务器模式所描述的是进程之间服务和被服务的关系。</li>\n<li>客户是服务的请求方，服务器是服务的提供方。</li>\n<li>客户&#x2F;服务器模式在可扩展性、自治性、坚定性等方面存在诸多不足</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071832169.png\" alt=\"image-20241107183247114\"></p>\n<h2 id=\"对等模式\"><a href=\"#对等模式\" class=\"headerlink\" title=\"对等模式\"></a>对等模式</h2><p>对等模式 (peer-to-peer，简写 P2P)是指两个主机通信时所处的地位是对等的，它们运行着对等软件就可以同时起着客户或服务器的作用向对方提供服务。<br>对等模式的特点：从本质上看仍然是使用客户&#x2F;服务器方式，但是对等连接中的每一个主机既是客户又同时是服务器。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071835585.png\" alt=\"image-20241107183517526\"></p>\n<h2 id=\"计算机网络的性能指标\"><a href=\"#计算机网络的性能指标\" class=\"headerlink\" title=\"计算机网络的性能指标\"></a>计算机网络的性能指标</h2><p>计算机网络的主要性能指标，包括速率、带宽、吞吐量、时延、往返时间、时延带宽积和利用率（6个）。</p>\n<h3 id=\"速率\"><a href=\"#速率\" class=\"headerlink\" title=\"速率\"></a>速率</h3><p>指计算机网络中的主机在信道上单位时间内传送数据量，又称数据率(data rate)或比特率(bit rate)。</p>\n<p>单位是比特&#x2F;秒(bit&#x2F;s或bps，即bit per second)。当速率较高时，可在单位b&#x2F;s前加上千($K&#x3D;10^3$)、兆($M&#x3D;10^6$)、吉($G&#x3D;10^9)$、太($T&#x3D;10^{12}$)、拍($T&#x3D;10^{15}$)和艾($E&#x3D;10^{18}$)。</p>\n<h3 id=\"带宽\"><a href=\"#带宽\" class=\"headerlink\" title=\"带宽\"></a>带宽</h3><p>在计算机领域，带宽指计算机网络的通信线路所能传送数据的能力，即在单位时间内从网络中的某一点到另一点所能达到的“<strong>最高数据速率</strong>”。单位是 比特&#x2F;秒(bit&#x2F;s) 。</p>\n<blockquote>\n<p>一条通信链路的“带宽”越宽，其所能传输的“最高数据率”也越高。</p>\n</blockquote>\n<h3 id=\"吞吐量\"><a href=\"#吞吐量\" class=\"headerlink\" title=\"吞吐量\"></a>吞吐量</h3><p>指单位时间内通过某个网络（或信道、接口）的数据量。单位是比特秒(bit&#x2F;s或bps(bit per second))。吞吐量更经常用于对某个网络的性能测试，以便知道实际上到底有多少数据量能够通过网络。</p>\n<h3 id=\"时延\"><a href=\"#时延\" class=\"headerlink\" title=\"时延\"></a>时延</h3><p>时延指数据(一个报文或分组或比特)从网络(或链路)的一端传送到另一端所需的时间。</p>\n<p>时延(又称延迟或迟延)由四个部分组成：</p>\n<ol>\n<li>发送时延：指主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。<br>$$传输时延&#x3D;\\frac{数据帧长度(bit)}{信道带宽(bit&#x2F;s)}$$</li>\n<li>传播时延 ：指电磁波在信道中传播一定距离所花费的时间。<br>$$传播时延&#x3D;\\frac{信道长度(m)}{电磁波在信道上的传播速度(m&#x2F;s)}$$</li>\n<li>处理时延 ：指主机或网络结点(路由器或交换机) 处理分组所花费的时间。包括对分组的首部分析、从分组中提取数据部分、进行差错检验或查找适当的路由等 。</li>\n<li>排队时延：指分组进入网络结点后，需先在输入队列中排队等待处理，以及处理完毕后在输出队列中排队等待转发的时间。排队时延的长短往往取决于网络中当时的通信量。当网络的通信量很大时，会发生队列溢出，使分组丢失，这相当于处理时延为无穷大。</li>\n</ol>\n<p>数据在网络中的总时延是上述4种时延之和：<br>$$总时延&#x3D;传输时延+传播时延+处理时延+排队时延$$</p>\n<h3 id=\"时延带宽积\"><a href=\"#时延带宽积\" class=\"headerlink\" title=\"时延带宽积\"></a>时延带宽积</h3><p>时延带宽积是指传播时延与带宽之乘积。<br>$$时延带宽积&#x3D;传播时延 \\times 带宽$$</p>\n<h3 id=\"利用率\"><a href=\"#利用率\" class=\"headerlink\" title=\"利用率\"></a>利用率</h3><p>利用率分为信道利用率和网络利用率。</p>\n<ul>\n<li>信道利用率：指在规定时间内信道上用于传输数据的时间比例。完全空闲的信道的利用率是零。</li>\n<li>网络利用率：指全网络的信道利用率的加权平均值。</li>\n</ul>\n<blockquote>\n<p>信道利用率力求高些，但并非越高越好。因为信道的利用率增大时，该信道引起的时延也就迅速增加。</p>\n</blockquote>\n<h2 id=\"计算机网络模型\"><a href=\"#计算机网络模型\" class=\"headerlink\" title=\"计算机网络模型\"></a>计算机网络模型</h2><h3 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h3><p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071833750.png\" alt=\"image-20241107183358667\"></p>\n<h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP&#x2F;IP模型\"></a>TCP&#x2F;IP模型</h3><p>(4) 应用层：该层向用务提供一组常用的应用程序，为不同主机上的进程或应用之间提供通信。<br>(3) 传输层：该层提供端对端系统的数据传送服务。<br>(2) 互联网层：该层使用网际协议实现穿越多个网络的路由选择功能。<br>(1) 网络接口层：该层是端系统和通信子网之间的接口，实现端系统与其相连的网络进行数据交换。</p>\n<h3 id=\"OSI与TCP-IP的比较\"><a href=\"#OSI与TCP-IP的比较\" class=\"headerlink\" title=\"OSI与TCP&#x2F;IP的比较\"></a>OSI与TCP&#x2F;IP的比较</h3><p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071837864.png\" alt=\"image-20241107183712772\"></p>\n<p>相同之处</p>\n<ol>\n<li>两者都采用层次型的模型；</li>\n<li>都以协议栈的概念为基础，且协议栈中的协议是彼此相互独立的；</li>\n<li>两个模型中各层的功能大体相似。</li>\n</ol>\n<p>不同之处</p>\n<ol>\n<li>服务、接口和协议这三个概念，OSI非常明确，TCP&#x2F;IP没有区分三者间的差异。前者的协议隐蔽性比后者好，这有利于协议的更新。 </li>\n<li><strong>OSI是模型在先协议在后</strong>，这意味着该模型具有通用性，而<strong>TCP&#x2F;IP模型却相反，模型只是已有协议的一个描述</strong>，但未必适合其他的协议栈。</li>\n<li>两种模型层的数目不同。 </li>\n<li>OSI的网络层同时支持面向连接和无连接服务，但传输层只支持面向连接服务。而<strong>TCP&#x2F;IP的网络层只有一种无连接服务模式</strong>，但在传输层同时支持两种服务模式。</li>\n<li>网络管理TCP&#x2F;IP考虑较早，而OSI后来才考虑的。</li>\n</ol>\n<h1 id=\"第二章-数据通信基础知识\"><a href=\"#第二章-数据通信基础知识\" class=\"headerlink\" title=\"第二章 数据通信基础知识\"></a>第二章 数据通信基础知识</h1><h2 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h2><p>在通信系统中，消息是通过电信号来传递的，信号是消息的载体。</p>\n<h3 id=\"信号的分类\"><a href=\"#信号的分类\" class=\"headerlink\" title=\"信号的分类\"></a>信号的分类</h3><p>（1）连续信号与离散信号</p>\n<p>（2）随机信号与确知信号</p>\n<ul>\n<li>随机信号是指其取值不确定、且不能事先确切预知的信号。</li>\n<li>确知信号是指其取值在任何时间都是确定的和可预知的信号。确知信号还可分为周期信号与非周期信号。</li>\n</ul>\n<h3 id=\"信号的特性\"><a href=\"#信号的特性\" class=\"headerlink\" title=\"信号的特性\"></a>信号的特性</h3><p>信号的特性表现在<strong>时间特性</strong>和<strong>频率特性</strong>两个方面</p>\n<ul>\n<li>时间特性主要指信号随时间变化的特性。信号随时间变化的表现包含了信号的全部信息量。</li>\n<li>频率特性是指信号可用频谱函数来表示的特性。频谱函数表征信号的各频率成分，以及各频率成分的振幅和相位。</li>\n</ul>\n<h2 id=\"传输方式\"><a href=\"#传输方式\" class=\"headerlink\" title=\"传输方式\"></a>传输方式</h2><h3 id=\"1、基带传输和频带传输\"><a href=\"#1、基带传输和频带传输\" class=\"headerlink\" title=\"1、基带传输和频带传输\"></a>1、基带传输和频带传输</h3><p>按照传输系统在传输数据信号过程中<strong>是否搬移其频谱</strong>，传输方式可分两类：</p>\n<ul>\n<li>基带传输：指不搬移信号频谱的传输体制。</li>\n<li>频带传输：指利用调制解调器搬移信号频谱的传输体制。<blockquote>\n<p>搬移频谱的目的是为了适应信道的频率特性。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、串行传输和并行传输\"><a href=\"#2、串行传输和并行传输\" class=\"headerlink\" title=\"2、串行传输和并行传输\"></a>2、串行传输和并行传输</h3><p>按照传输数据的时空顺序，传输方式可分为两类：</p>\n<p>1）串行传输：指数据在一个信道上按位依次传输的方式。<br>    特点：<br>        1. 所需线路数少，投资省，线路利用率高；<br>        2. 在发送和接收端需要分别进行并&#x2F;串和串&#x2F;并转换；<br>        3. 收发之间必须实施同步。适用于远距离数据传输。</p>\n<p>2）并行传输：指数据在多个信道上同时传输的方式。<br>    特点是：</p>\n<pre><code>      1. 在终端装置和线路之间不需要对传输代码作时序变换；\n        2. 需要n条信道的传输设施，故其成本较高。\n          3. 适用于要求传输速率高的短距离数据传输。 \n</code></pre>\n<p><strong>串行传输</strong>：每次传输一个比特，传输一个字符需要按顺序发送多个比特。</p>\n<p><strong>并行传输</strong>：每次传输多个比特（通常是一个字节），因此传输一个字符时会一次性通过多个线路传输多个比特。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071833182.png\" alt=\"image-20241107183309137\"></p>\n<h3 id=\"3、异步传输和同步传输\"><a href=\"#3、异步传输和同步传输\" class=\"headerlink\" title=\"3、异步传输和同步传输\"></a>3、异步传输和同步传输</h3><p>针对串行传输，每个字符按位串行传送，为使接收端能准确接收所传输的信息，接收端需要知道字符开始和结束的位置等，所以引申出异步传输和同步传输。</p>\n<p>1）异步传输：被传送的每一个字符一般都附加有1个起始位和1个停止位，起始位与停止位的极性不同。为了保证正确接收，利用一个频率为传输比特率的n(&#x3D;16)倍的时钟，在每一个比特周期的中心采样。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071838521.png\" alt=\"image-20241107183858426\"></p>\n<p>2）同步传输：通常不是独立地发送每个字符（每个字符都有自己的开始位和停止位），而是把它们组合起来称为数据帧（简称帧）进行传送。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071713608.png\" alt=\"{086B427D-15FE-429F-9D52-D84E7EF7EA16}\"></p>\n<p>区别：</p>\n<ol>\n<li>异步传输是面向字符的传输，而同步传输是面向比特的传输。</li>\n<li>异步传输的单位是字符，而同步传输的单位是帧。</li>\n<li>异步传输通过字符起止的起始位和停止位来实现，而同步传输则需从数据中抽取同步信息。</li>\n<li>异步传输对时序的要求较低，同步传输往往通过特定的时钟线路协调时序。</li>\n<li>异步传输相对于同步传输效率较低。</li>\n</ol>\n<h3 id=\"4、单工、半双工和全双工\"><a href=\"#4、单工、半双工和全双工\" class=\"headerlink\" title=\"4、单工、半双工和全双工\"></a>4、单工、半双工和全双工</h3><p>按照数据信号在信道上的传送方向与时间的关系，传输方式可分为三类：</p>\n<p>1）单工：指两个站之间只能沿一个指定的方向传送数据信号。<br>2）半双工：指两个站之间可以在两个方向上传送数据信号，但不能同时进行。又称“双向交替”模式。发&#x2F;收之间的转向时间为20～50ms。<br>3）全双工：指两个站之间可以在两个方向上同时传送数据信号。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071833041.png\" alt=\"image-20241107183327997\"></p>\n<h2 id=\"传输速率\"><a href=\"#传输速率\" class=\"headerlink\" title=\"传输速率\"></a>传输速率</h2><p>传输速率    指单位时间内传送的信息量，是衡量数据通信系统传输能力的一个重要指标。常用的传输速率有两种：<br>1）<strong>调制速率</strong>(或波特率、码元速率)<br>    指单位时间内调制信号波形的变换次数。其单位是波特。<br>    $R_B&#x3D;1&#x2F;T(s)$ (Baud)<br>2）<strong>数据信号速率</strong>(或传信率、比特率)<br>    指单位时间内通过信道的信息量。其单位是比特&#x2F;秒。<br>    $R_b &#x3D; \\sum_{i&#x3D;1}^{n} \\frac{1}{T_i} \\log_2 M_i$ (b&#x2F;s)</p>\n<p>$M$表示每个码元的状态数或不同符号数（即调制的进制数）。例如，2态调制表示 $M&#x3D;2$（每个码元代表1比特），而4态调制表示 $M&#x3D;4$（每个码元代表2比特）。</p>\n<p>调制速率与数据信号速率的关系：<br>$$R_b&#x3D;R_Blog_{2}{M}$$</p>\n<blockquote>\n<p>例题：若采用8路并行传输和二进制调制，每路调制信号波的最短持续时间$T_i&#x3D;0.013s$，试求数据信号速率$R_b$和调制信号$R_B$。</p>\n</blockquote>\n<p>解：</p>\n<blockquote>\n<p>$R_b &#x3D; \\sum_{i&#x3D;1}^{8} \\frac{1}{T_i} \\log_2 2&#x3D;75\\times1\\times8&#x3D;600(b&#x2F;s)$</p>\n<p>$R_B&#x3D;\\frac{1}{T_i}&#x3D;\\frac{1}{0.013}&#x3D;75(Baud)$</p>\n</blockquote>\n<p>按照$R_B和R_b$ 的关系也可以求出$R_b$，但因为是并行传输，所以记得乘以8，如果是串行的话就不需要累加了。</p>\n<p>课后题：</p>\n<blockquote>\n<p>200波特2态调制线路的数据传输速率$R_c$为多少？（采用ASCII编码，串行起止同步方式）</p>\n</blockquote>\n<p>解：</p>\n<blockquote>\n<p><strong>已知条件：</strong></p>\n<p>$M&#x3D;2$，则$R_b&#x3D; R_B \\times log_2 2&#x3D;200(b&#x2F;s)$</p>\n<ul>\n<li>ASCII编码：每个字符使用8比特（数据位）</li>\n<li>串行起止同步方式：每个字符包括起始位（1比特）和停止位（1比特）</li>\n<li>加起来总共10比特</li>\n</ul>\n<p><strong>计算步骤：</strong></p>\n<ol>\n<li><p>每个字符需要传输的比特数为：<br>$$<br>\\text{每个字符的比特数} &#x3D; 1 (\\text{起始位}) + 8 (\\text{数据位}) + 1 (\\text{停止位}) &#x3D; 10  \\text{比特}<br>$$</p>\n</li>\n<li><p>每秒钟传输的字符数为：<br>$$<br>R_c&#x3D;\\text{字符传输速率} &#x3D; \\frac{200 \\text{b&#x2F;s}}{10 \\text{b&#x2F;字符}} &#x3D; 20 \\text{字符&#x2F;秒}<br>$$</p>\n</li>\n<li><p>转换为每分钟字符传输速率：<br>$$<br>R_c&#x3D;\\text{字符传输速率} &#x3D; 20  \\text{字符&#x2F;秒} \\times 60 \\ \\text{秒&#x2F;分钟} &#x3D; 1200 \\text{字符&#x2F;分钟}<br>$$</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"传输损伤\"><a href=\"#传输损伤\" class=\"headerlink\" title=\"传输损伤\"></a>传输损伤</h2><p>数据信号在数据通信系统的端到端连接的每个环节都可能受到伤害，ITU称之为传输损伤。<br>并推荐用<strong>误码、抖动、漂移、滑动、时延</strong>来表示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071833719.png\" alt=\"image-20241107183318660\"></p>\n<h2 id=\"传输质量\"><a href=\"#传输质量\" class=\"headerlink\" title=\"传输质量\"></a>传输质量</h2><p>1）衰减与增益<br>    衰减：当信号沿传输媒体传播时，其部分能量转换成热能或被传输媒体所吸收，而导致信号强度不断减弱的现象。</p>\n<p>2）失真<br>    信号通过传输系统时，其波形可能发生畸变的现象称为失真。</p>\n<p>3）畸变<br>    数据信号畸变有两种：规则畸变和不规则畸变。</p>\n<p>4）噪声和干扰<br>    噪声：在数据信号的传输过程中，所引入的一些额外的非期望信号。<br>    干扰：环境干扰、人为恶意干扰</p>\n<p>5）信噪比<br>    信噪比SNR    指信号通路某一点上的信号功率$P_s$与混在信号中的噪声功率$P_N$之比值（常用对数表示）。SNR用来描述信号在传输过程中受到噪声影响的度量。<br>$$SNR&#x3D;10lg\\frac{P_S}{p_N}$$</p>\n<blockquote>\n<p>信噪比越高，意味着噪声的含量越低</p>\n</blockquote>\n<p>6）误码率<br>    平均误码率：指单位时间内接收到的出错码元数占总码元数的比例。</p>\n<h1 id=\"第三章-数据传输信道\"><a href=\"#第三章-数据传输信道\" class=\"headerlink\" title=\"第三章 数据传输信道\"></a>第三章 数据传输信道</h1><h2 id=\"信号传输流程\"><a href=\"#信号传输流程\" class=\"headerlink\" title=\"信号传输流程\"></a>信号传输流程</h2><p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071833447.png\" alt=\"image-20241107183338397\"></p>\n<p>（这张图要会画出来，问了老师这张图有点问题，解码器和解调器要调换一下位置，先解调之后再解码）<br>信号传输流程一般包含以下步骤（按照这个顺序背一下）：</p>\n<ol>\n<li><strong>信号源</strong>：原始信号从信号源产生，可能是模拟信号（如语音）或数字信号（如二进制数据）。</li>\n<li><strong>编码器编码</strong>：信号经过编码器编码，转化为适合传输的形式。这种编码可以包括信道编码，以增加信号的抗噪性和纠错能力。</li>\n<li><strong>调制器调制</strong>：编码后的信号送入调制器，将信号调制到适合传输的频率上。这一过程将信号转换成高频信号，便于在传输介质中传播（如无线电波或光纤中的光信号）。</li>\n<li><strong>载波调制</strong>：调制后的信号与载波信号相结合，形成一个频率稳定的载波信号，这个过程由载波机完成。载波可以是正弦波，用于在不同频段上传输不同信号。</li>\n<li><strong>传输系统传输</strong>：调制后的载波信号在传输介质（如无线信道、光纤、电缆等）中传播，过程中可能会受到衰减、噪声、干扰等因素的影响。</li>\n<li><strong>接收端载波解调</strong>：在接收端，载波机接收信号并将其解调，提取出原始的调制信号，使之返回基带信号。这一过程去除了载波频率，保留了信号本身的频率信息。</li>\n<li><strong>解调器解调</strong>：解调后的信号通过解调器还原出原始信号形式，将其转换回编码信号。</li>\n<li><strong>解码器解码</strong>：解码器对信号进行解码，去除传输中可能添加的冗余信息，并校正错误，最终得到原始的数据信号。</li>\n<li><strong>信号还原</strong>：经过解调和解码，恢复成发送端的原始信号，传递给终端设备，供使用或进一步处理。</li>\n</ol>\n<h2 id=\"传输介质\"><a href=\"#传输介质\" class=\"headerlink\" title=\"传输介质\"></a>传输介质</h2><p>传输介质是指发送器与接收器之间的物理通路。<br>1）导引型传输介质：指电磁波被导向沿着某一媒体传播<br>    包括双绞线、同轴电缆、电力线和光缆。</p>\n<p>2）非导引型传输介质：指电磁波在大气层、外层空间或海洋中进行的无线传播。<br>    包括短波传输、地面微波、卫星微波、散射传输和光波传输等。</p>\n<h1 id=\"第四章-数据传输技术\"><a href=\"#第四章-数据传输技术\" class=\"headerlink\" title=\"第四章 数据传输技术\"></a>第四章 数据传输技术</h1><blockquote>\n<p>模拟信号数字化的过程包括<strong>抽样、量化和编码</strong>三个步骤。</p>\n</blockquote>\n<p>抽样：在一系列离散的时间点上进行抽取其样值（此时仍然是模拟信号）</p>\n<p>量化：输入模拟信号的抽样值，然后通过量化器输出信号的量化值（此时转换成数字信号）</p>\n<p>编码：对量化器输出的数字信号进行编码</p>\n<h2 id=\"脉冲编码调制-PCM\"><a href=\"#脉冲编码调制-PCM\" class=\"headerlink\" title=\"脉冲编码调制(PCM)\"></a>脉冲编码调制(PCM)</h2><p>习惯上把由模拟信号抽样、量化到编码的整个过程，成为脉冲编码调制。<br>脉冲编码调制（PCM）完成了 <strong>将模拟信号转换为数字信号</strong> 的过程</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071714633.png\" alt=\"{57233D31-98C3-4836-A652-7D56FDA708F1}\"></p>\n<p>（这个图也很重要！）<br>脉冲编码调制（PCM）系统的完整流程如下：</p>\n<ol>\n<li><strong>模拟信号</strong>：首先，模拟信号从信号源生成，通常是连续变化的电信号，如语音或音乐。</li>\n<li><strong>抽样保持电路</strong>：模拟信号进入抽样保持电路，按照奈奎斯特采样定理，以一定的采样频率对信号进行抽样，将连续信号转换为离散时间信号。</li>\n<li><strong>量化器</strong>：抽样后的离散信号进入量化器，根据信号的振幅对其进行量化。量化将信号的连续振幅值转换为离散的有限级别，通常用整数表示，这一步引入了量化误差。</li>\n<li><strong>编码器</strong>：量化后的信号通过编码器，将每个量化值编码为二进制数。这些二进制数的集合就是数字信号，即 PCM 信号，适合在数字系统中传输或存储。</li>\n<li><strong>传输</strong>：编码后的 PCM 信号经过传输系统传输到接收端。</li>\n<li><strong>解码器</strong>：在接收端，PCM 信号进入解码器，将二进制数解码还原为量化的信号值。</li>\n<li><strong>低通滤波器</strong>：解码后的离散信号通过低通滤波器，去除高频成分，平滑离散信号，恢复为连续的模拟信号。</li>\n<li><strong>形成模拟信号</strong>：经过低通滤波器处理，信号最终重建为模拟信号，可以还原为与输入信号相近的形式。</li>\n</ol>\n<h2 id=\"基带信号的波形及其传输码型\"><a href=\"#基带信号的波形及其传输码型\" class=\"headerlink\" title=\"基带信号的波形及其传输码型\"></a>基带信号的波形及其传输码型</h2><p>基带信号：把原始的数字信号称为基带信号</p>\n<p>常用的基带信号波形：</p>\n<ul>\n<li>单极性不归零脉冲(图4-7a)</li>\n<li>单极性归零脉冲(图4-7b)</li>\n<li>双极性不归零脉冲(图4-7c)</li>\n<li>双极性归零脉冲(图4-7d)</li>\n<li>(传号)差分脉冲(图4-7e)</li>\n<li>四电平脉冲(图4-7f)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071833896.png\" alt=\"image-20241107183300816\"></p>\n<p>我的总结规律：</p>\n<ul>\n<li>单极性不归零：0就是0，1就是E，如果多个1连续出现就一直E</li>\n<li>单极性归零：0还是0，1的一半是E，一半归0</li>\n<li>双极性不归零：0是-E，1是E，如果连续多个1或多个0就一直E或-E，跟0没有交点</li>\n<li>双极性归零：0的一半是-E，一半要归0，1的一半是E，一半归0</li>\n<li>传号差分：第一位0是0，1是E。后面如果出现1，则波形与前一个相反(发生跳变)，如果是0就保持跟前一个波形一致<br>   例如(e) 第一个信号为0，第二个信号是1，波形从0-E，第三个信号0，则波形保持E，第四个信号为1，则波形发生跳变，从E-0，第五个还是1，波形再次跳变，从0-E……</li>\n<li>四电平：按照规则来就行</li>\n</ul>\n<h2 id=\"数字频带传输技术\"><a href=\"#数字频带传输技术\" class=\"headerlink\" title=\"数字频带传输技术\"></a>数字频带传输技术</h2><p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071756855.png\" alt=\"image-20241107175634589\"></p>\n<p>（只需要掌握这三个调制方式的画图，其中FSK的图已经问过老师了，书上画错了，信号“1”对应的正弦载波应该是一样的，图中红色的地方改成一样的波形即可。）</p>\n<p>下面是细分解释：</p>\n<h3 id=\"数字幅度调制\"><a href=\"#数字幅度调制\" class=\"headerlink\" title=\"数字幅度调制\"></a>数字幅度调制</h3><p>（1） 二进制幅度键控（2ASK）</p>\n<ul>\n<li>基本思想：传送“1”信号输出正弦载波信号 $Acos(\\omega_c t+\\phi_c)$ ，传送“0”信号无载波输出。</li>\n</ul>\n<h3 id=\"数字频率调制\"><a href=\"#数字频率调制\" class=\"headerlink\" title=\"数字频率调制\"></a>数字频率调制</h3><p>（1）二进制频移键控（2FSK）</p>\n<ul>\n<li>传送“1”信号输出$Acos(\\omega_1 t+\\phi_1)$，传送“0”信号输出$Acos(\\omega_2 t+\\phi_2)$</li>\n</ul>\n<h3 id=\"数字相位调制\"><a href=\"#数字相位调制\" class=\"headerlink\" title=\"数字相位调制\"></a>数字相位调制</h3><p>基本思想：利用基带数字信号控制载波相位的变化来传输数字信息“1”和“0”。</p>\n<p>1） 二进制相对相移键控(2DPSK)</p>\n<ul>\n<li><strong>若假定当传送的数字信号为“1”时，码元中载波的相位相对于前一码元的载波相位差为π</strong>；</li>\n<li><strong>当传送的数字信号为“0”时，码元中载波的相位相对于前一码元的载波相位不变。</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071716030.png\" alt=\"Pasted image 20241026201411\"></p>\n<h3 id=\"解调的方法——相干解调法\"><a href=\"#解调的方法——相干解调法\" class=\"headerlink\" title=\"解调的方法——相干解调法\"></a>解调的方法——相干解调法</h3><p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071730901.png\" alt=\"image-20241015223541893\"></p>\n<p>关键：</p>\n<ul>\n<li>要有一个与ASK信号的载波保持同频同相的相干载波c(t)</li>\n<li>c(t) 与 s(t) 在相乘器相乘后通过低通滤波器即可得到基带信号</li>\n</ul>\n<h2 id=\"信道访问技术\"><a href=\"#信道访问技术\" class=\"headerlink\" title=\"信道访问技术\"></a>信道访问技术</h2><p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071833679.png\" alt=\"image-20241107183347587\"></p>\n<h3 id=\"轮询访问技术\"><a href=\"#轮询访问技术\" class=\"headerlink\" title=\"轮询访问技术\"></a>轮询访问技术</h3><p>主机依照一定的顺序探询各结点有无传递信息的要求，被探询的结点如有传送要求就占用共有信道，将信息发给主机；否则，主机继续探询下一个结点。</p>\n<h4 id=\"1-轮叫轮询\"><a href=\"#1-轮叫轮询\" class=\"headerlink\" title=\"1. 轮叫轮询\"></a>1. 轮叫轮询</h4><p>流程：主机按照顺序从结点1开始，结点1有数据就发送给主机，没有数据就发送<strong>控制帧</strong>给主机。然后主机探询结点2，3……</p>\n<p>在轮叫轮询访问控制时，假设主机向各节结点发送的探询帧为定长，其传输时间为 $t_0$，每个结点识别探询帧所需的时间是$t_s$。设各结点在多点线路上物理分布是均匀的，主机到最远结点的单程传播时间为$\\tau$。</p>\n<p>则探询系统的巡回时间L为：<br>$$<br>L&#x3D;N(t_0+t_s)+(N+1)\\tau<br>$$<br><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071717070.png\" alt=\"image-20241015221512859\"></p>\n<h4 id=\"2-传递轮询\"><a href=\"#2-传递轮询\" class=\"headerlink\" title=\"2. 传递轮询\"></a>2. 传递轮询</h4><p>流程：主机先向1发送探询帧，当结点1响应并将数据发回主机或者通知主机没有发送的数据史，<strong>便将探询帧的接收地址修改为结点2</strong>，接着将探询帧转发给结点2……直到结点N将数据发回主机或通知主机没有发送的数据，再将探询帧的接收地址修改为主机，重新将探询控制权交还给主机。</p>\n<p>传递轮询允许被探询结点修改探询帧的接收地址，从而克服了轮叫轮询方式中主机一直掌握着发送探询帧的控制权，造成通信开销大、帧的传送时延长的缺点。</p>\n<p>整个系统巡回时间的计算公式：<br>$$<br>L&#x3D;Nt_s+2 \\tau<br>$$<br>递轮询与轮叫轮询的比较</p>\n<ul>\n<li>在相同条件下，传递轮询帧的时延比轮叫轮询的时延要小，而且结点间距离越大，其效果越明显。</li>\n<li>因为传递轮询技术的实现较复杂，所以实际使用中还是以轮叫轮询为主。</li>\n</ul>\n<h3 id=\"争用访问技术\"><a href=\"#争用访问技术\" class=\"headerlink\" title=\"争用访问技术\"></a>争用访问技术</h3><p>争用技术是一种随机访问技术。由于所有用户都可以根据自己的需要向公用信道发送信息，于是就产生了争用信道使用权的问题。只有争用获胜者才取得了信道使用权可以发送信息，而争用的存在又必然会发生冲突(或碰撞)，这就须解决冲突所带来的问题。</p>\n<h4 id=\"1-ALOHA技术\"><a href=\"#1-ALOHA技术\" class=\"headerlink\" title=\"1. ALOHA技术\"></a>1. ALOHA技术</h4><p>1 纯ALOHA<br>每一站均可自由地发送帧，并利用应答技术来确保发送的成功。<strong>当从站发送一个帧之后，必须等待主站的应答帧予以确认，方能继续发送下一帧。</strong>如果未收到应答信号，就意味着发生了帧的冲突，必须进行重发。<br><strong>纯ALOHA采用让发生帧冲突的从站各自等待一段随机的时间后再进行重发的策略，直到发送成功为止。</strong></p>\n<p>2 时隙ALOHA<br>为了提高纯ALOHA系统的吞吐量，可使各站在同步状态下工作，并把时间划分为等长的时隙，通过预约技术来争用信道的使用权。<strong>同时规定无论帧何时到达，都只能在每个时隙的开始时刻才能发送出去</strong>。这种ALOHA称为时隙ALOHA。</p>\n<p>3 预约ALOHA。<br>预约ALOHA的基本思想是：在网络负载轻时按ALOHA方式工作，而当网络负载重时按近似于时分复用方式工作。</p>\n<h4 id=\"2-CSMA技术\"><a href=\"#2-CSMA技术\" class=\"headerlink\" title=\"2. CSMA技术\"></a>2. CSMA技术</h4><p>CSMA是对用于有线信道ALOHA系统的一种改进，它要求每个站都设置一硬件(即载波监听装置， “载波”是指在公用信道上传输的信号。)，<strong>用来在发送数据之前监听同一信道上其他站是否也在发送数据</strong>。如果该站监听到有别的站正在发送，就暂不发送数据，从而减少发送冲突的可能性，也提高了整个系统的吞吐量和信道利用率。</p>\n<p>根据每个站所采用的载波监听策略，CSMA可分为以下几种类型：</p>\n<ol>\n<li><strong>非坚持CSMA</strong>   如果进行载波监听时发现信道空闲，则将准备好的帧发送出去；如果监听到信道忙，就不再继续坚持听下去，而根据协议的算法延迟一个随机时间再重新监听。</li>\n<li><strong>1坚持CSMA</strong>    当监听到信道空闲时，就立即发送帧；如果监听到信道为忙，则继续监听下去，一直坚持到信道变成空闲为止。</li>\n<li><strong>P坚持CSMA</strong>    当监听到信道为空闲时，<strong>以概率p立即发送帧，而以概率(1- p)延迟一段时间τ (端─端传播时延)再重新监听信道</strong>；当监听到信道为忙时，则继续监听下去，一直坚持到信道空闲为止。</li>\n</ol>\n<h4 id=\"3-环访问技术\"><a href=\"#3-环访问技术\" class=\"headerlink\" title=\"3. 环访问技术\"></a>3. 环访问技术</h4><p>（1）令牌环<br>令牌环是一种最早提出的环访问技术。利用令牌环技术构成的局域网有Newhall环网和IBM令牌环网。它们是制定IEEE 802.5标准的基础。令牌环技术的优点是易于调节通信量。缺点是令牌操作和管理复杂</p>\n<p>原理：利用在环路中流动的唯一的令牌帧。初始状态时，不含有数据的令牌帧称为“闲”令牌帧。要求传输数据的站必须等待令牌帧的到达，<strong>如检测是“闲”的，于是就通过改变其比特组合将令牌由“闲”改成“忙”</strong>，并在此令牌后面传输待发送的数据。此时环路上因没有“闲”令牌，其他希望发送数据的站必须等待。当包含数据的“忙”令牌帧沿环路传送到非目的站时，则转发该帧。只有当它传送到目的站时，目的站才复制该帧的有关信息，并继续转发该帧。这个“忙”令牌帧绕环一周后又返回到源站，则由源站对数据实施检查和回收，并将“忙”改为“闲”。</p>\n<p>（2）时隙环</p>\n<p>原理：把信息在环路上的传送时间划分为固定长度的时间段(简称时隙)。每一个时隙都含有一先导标志位，表示该时隙的现行状态：空或满。若干时隙在环路上绕环运行。初始时，所有的时隙都是空的。要求传送数据的站必须等待一个空时隙到达，将先导标志位改为满，同时在时隙中加入所要传送的数据。当载有数据的时隙到达目的站时，目的站将复制时隙中的数据，同时设置响应位，以表征接收的状态(接收、拒收和忙)。只有当时隙返回到源站时，才将时隙先导标志位重新改为空，以便该时隙供下游的结点继续使用。</p>\n<h2 id=\"信道复用技术\"><a href=\"#信道复用技术\" class=\"headerlink\" title=\"信道复用技术\"></a>信道复用技术</h2><h3 id=\"1-频分复用\"><a href=\"#1-频分复用\" class=\"headerlink\" title=\"1. 频分复用\"></a>1. 频分复用</h3><p>频分多路复用FDM(Frequency Division Multiplexing)是按照频率参量的差别来分割信号的技术。</p>\n<p>基本思路：把信道的可用频带分割为若干条较窄的子频带，用户自始至终使用分配到的子频带来传输信号。</p>\n<p><strong>典型例子：广播电视，无线通信。</strong></p>\n<p>FDM的主要优点：<br>实现简单；技术成熟；能较充分地利用信道频带，因而系统效率较高。</p>\n<p>FDM的主要缺点：</p>\n<ol>\n<li>保护频带的存在，大大地降低了FDM技术的效率；</li>\n<li>信道的非线性失真，改变了它的实际频带特性，易造成串音和互调噪声干扰；</li>\n<li>所需设备量随输入路数增加而增多，且不易小型化；</li>\n<li>频分多路复用本身不提供差错控制技术，不便于性能监测。</li>\n</ol>\n<h3 id=\"2-波分复用\"><a href=\"#2-波分复用\" class=\"headerlink\" title=\"2. 波分复用\"></a>2. 波分复用</h3><p>波分复用是传统的频分复用技术应用于光纤通信领域，因此波分复用的本质是频分复用。</p>\n<p>波分复用是将1根光纤转换为多条“虚拟”光纤，每条虚拟光纤独立工作于不同波长，从而极大地提高了光纤的传输容量，充分发挥了光纤的潜在能力。</p>\n<p>（<strong>例：光纤通信</strong>）</p>\n<p>波分复用的特点（不用记）：</p>\n<ol>\n<li>利用光纤低损耗波段，增加了光纤的传输容量。</li>\n<li>在一根光纤中传送2个或数个非同步信号，这有利于数字信号和模拟信号的兼容。</li>\n<li>对已建光纤系统，只要原系统有功率余量，便可进行增容，因而有较强的灵活性。</li>\n<li>光纤使用量的减少，降低了建设成本。</li>\n<li>有源光设备的共享性，降低了成本。</li>\n<li>系统中有源设备的减少，提高了系统的可靠性。</li>\n</ol>\n<h3 id=\"3-时分复用\"><a href=\"#3-时分复用\" class=\"headerlink\" title=\"3. 时分复用\"></a>3. 时分复用</h3><p><strong>例子：电话交换系统</strong></p>\n<p>1、传统时分复用<br>时分多路复用（TDM）是按照<strong>时间参量</strong>的差别来分割信号的技术。</p>\n<p>时分复用是<strong>将时间划分为一段段等长的时分复用帧</strong>(TDM 帧)。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。每一个用户所占用的时隙是周期性地出现(其周期就是 TDM帧的长度)。因此，TDM 信号也称为等时(isochronous)信号。</p>\n<p>时分复用的所有用户是在<strong>不同的时间占用同样的频带宽度。</strong> </p>\n<p>传统TDM的特点：</p>\n<ol>\n<li>通信双方是按照预先指定的时隙进行通信的，而且这种时间关系是固定不变的；</li>\n<li>就某一瞬时来看，公用信道上仅传输某一对设备的信号，而不是多路复合信号，但就一段时间而言，公用信道上传送着按时间分隔的多路复合信号。</li>\n<li>只要时分多路复用器的扫描操作适当，以及采取必要的缓冲措施和合理地分配时隙，就能够保证多路通信的正常进行。</li>\n</ol>\n<p>2、统计时分多路复用</p>\n<p>使用传统时分多路复用来传输计算机数据，由于计算机数据的突发性，用户对分配到的子信道的利用率一般是不高的。<br>当某用户暂时无数据发送时，在时分复用帧中分配给该用户的时隙只能处于空闲状态，从而造成资源浪费。</p>\n<p>为了提高时隙的利用率，可以采用按需分配(或动态分配)时隙，以避免每帧中出现闲置时隙的现象。这种动态分配时隙的TDM，称为统计时分多路复用STDM(Statistic TDM)。</p>\n<p>STDM也存在技术缺陷。如当复用器连接的设备较多，又都处于工作状态,或者少数设备发送很长的数据块，将会出现与数据块和排队有关的时延加剧问题。又如当传输出现差错时造成一个或数个帧数据重发，将会导致时延的加剧。</p>\n<h3 id=\"4-码分复用（重要）\"><a href=\"#4-码分复用（重要）\" class=\"headerlink\" title=\"4. 码分复用（重要）\"></a>4. 码分复用（重要）</h3><blockquote>\n<p>提高语音质量和数据传输的可靠性</p>\n</blockquote>\n<p><strong>概念</strong>：码分复用是利用每个码元的码组的正交性来分割信号的一种技术。<br>常用的码分复用是码分多址CDMA。每个用户使用经过特殊挑选的不同码型，故在同样的时间内使用同样的频带进行通信，而不会造成相互干扰。 </p>\n<p>CDMA技术可提高话音质量和数据传输的可靠性，减少干扰对通信的影响，增大通信系统的容量(是GSM的4～5倍)，以及减少平均发射功率等。</p>\n<p><strong>实现</strong>：每一个比特时间被划分为m个间隔，称为码片(chip)。通常m的值是64或128。<br>使用CDMA的每一个站被分派一个唯一的bit码片序列（chip sequence）。<br>一个站如果要发送比特1，则发送它自己的m bit码片序列。如果要发送比特0，则发送该码片序列的二进制反码。</p>\n<blockquote>\n<p>例如，S 站的 8 bit 码片序列是 00011011。<br>发送比特 1 时，就发送序列 00011011，<br>发送比特 0 时，就发送序列 11100100。<br>为了方便，我们以后将两码片中的0写成–1，将1写为+1。  因此，S 站的码片序列：(–1 –1 –1 +1 +1 –1 +1 +1)</p>\n</blockquote>\n<p><strong>码分序列实现了扩频</strong><br>假定S站要发送信息的数据率为 b bit&#x2F;s。由于每一个比特要转换成 m 个比特的码片，因此 S 站实际上发送的数据率提高到 mb bit&#x2F;s，同时 S 站所占用的频带宽度也提高到原来数值的 m 倍。</p>\n<p>CDMA系统采用的码片具有如下<strong>特性</strong>：<br>令向量A表示A站的码片向量，再令B表示其他任何站的码片向量。 </p>\n<ol>\n<li>分派给每一个站的码片不仅互不相同，并且必须互相正交(orthogonal)。向量A和B的内积都是0。<br>$$<br>A \\bullet B &#x3D; \\frac{1}{m}\\sum_{i&#x3D;1}^{m}A_iB_i &#x3D;0<br>$$</li>\n<li>任何一个码片向量的规格化内积都是1。<br>一个码片向量和该码片反码的向量的规格化内积值是– 1。<br>$$<br>A \\bullet A &#x3D; \\frac{1}{m}\\sum_{i&#x3D;1}^{m}A_iA_i &#x3D;\\frac{1}{m}\\sum_{i&#x3D;1}^{m}{A_i}^2&#x3D;1<br>$$</li>\n</ol>\n<p>题目：</p>\n<blockquote>\n<p>若有4个站进行码分多址CDMA通信。4个站的码片序列为：<br>A:  (-1 -1 -1 +1 +1 -1 +1 +1)<br>B:  (-1 -1 +1 -1 +1 +1 +1 -1)<br>C:  (-1 +1 -1 +1 +1 +1 -1 -1)<br>D:  (-1 +1 -1 -1 -1 -1 +1 -1)<br>现收到这样的码片序列： （-1 +1 -3 +1 -1 -3 +1 +1），问哪个站发送了数据？发送的数据的站发送的1还是0？</p>\n</blockquote>\n<p>解题：</p>\n<p>$S\\bullet A &#x3D; \\frac{1}{8}\\sum_{i&#x3D;1}^{8}SA &#x3D; 1$        A 发送了数据，发送的是1</p>\n<p>$S\\bullet B &#x3D; \\frac{1}{8}\\sum_{i&#x3D;1}^{8}SB &#x3D; -1$     B 发送了数据，发送的是0</p>\n<p>$S\\bullet C &#x3D; \\frac{1}{8}\\sum_{i&#x3D;1}^{8}SC &#x3D; 0$         C 没有发送数据</p>\n<p>$S\\bullet D &#x3D; \\frac{1}{8}\\sum_{i&#x3D;1}^{8}SD &#x3D; 1$         D 发送了数据，发送的是1</p>\n<h2 id=\"同步控制技术（四个）\"><a href=\"#同步控制技术（四个）\" class=\"headerlink\" title=\"同步控制技术（四个）\"></a>同步控制技术（四个）</h2><p>同步——指通信双方在发送和接收信号时建立起来的确定通信关系，是数据通信系统不可或缺的重要环节。</p>\n<blockquote>\n<p>按照要求同步的对象不同，可分为<strong>载波同步、位同步、群同步和网同步</strong>。</p>\n</blockquote>\n<h3 id=\"1）载波同步\"><a href=\"#1）载波同步\" class=\"headerlink\" title=\"1）载波同步\"></a>1）载波同步</h3><p>在相干解调系统中，<strong>接收端必须提供一个与发送端同频同相的相干载波</strong>，这一过程称为载波同步。<br>实现载波同步的方法有两类：</p>\n<ol>\n<li>一类是如接收的已调信号频谱中已含有载波分量或载波导频分量，则直接提取；</li>\n<li>另一类是对于抑制载波而又没有插入导频的已调信号，则通过非线性变换或采用锁相环来获取载波。</li>\n</ol>\n<h4 id=\"插入导频法\"><a href=\"#插入导频法\" class=\"headerlink\" title=\"插入导频法\"></a>插入导频法</h4><p>插入导频法(又称外同步法)可分为<strong>频域插入和时域插入</strong>。<br>基本原理：发送端在发送有用信号频谱的同时，在其适当的位置<strong>插入一个低功率的线谱</strong>(其对应的正弦信号称为导频信号)，这样接收端就可以利用窄带滤波器把它提取出来，再经适当处理后形成相干载波。<br>应注意：</p>\n<ol>\n<li>导频的频率应与载频有关；</li>\n<li>插入导频的位置应在信号频谱的零点处，且要求载频附近的信号分量尽量小。</li>\n</ol>\n<h3 id=\"2）位同步\"><a href=\"#2）位同步\" class=\"headerlink\" title=\"2）位同步\"></a>2）位同步</h3><p>在数据通信系统中，接收端必须有一个与发送端码元定时脉冲频率相同、相位与最佳取样时刻一致的码元定时脉冲序列。接收端产生这种码元定时信号的过程，称为位同步(或码元同步)。<br>位同步的关键是：</p>\n<ol>\n<li><strong>频率同步</strong>：接收端的定时脉冲的频率必须与发送端的码元定时频率相同。这样，接收端每隔一个固定的时间间隔就能够对接收到的信号进行采样。</li>\n<li><strong>相位同步</strong>：接收端的取样时刻必须与发送端的码元开始时刻一致，以便在接收到的信号的正确位置进行采样。这可以确保接收端在最清晰的时间点读取到码元，而不是在噪声较多的时刻。</li>\n</ol>\n<h3 id=\"3）群同步\"><a href=\"#3）群同步\" class=\"headerlink\" title=\"3）群同步\"></a>3）群同步</h3><p>实现帧或信息包同步传输的过程，称为群同步。群同步一般是通过数据格式的特殊设计来达到的，亦即通过在数据码元序列中<strong>插入特定的同步码元或同步码组</strong>来实现群同步。</p>\n<p><em><strong>因此，实现群同步的关键在于如何识别插入的同步标志。</strong></em></p>\n<blockquote>\n<p>可以将<strong>群同步</strong>类比为读书时使用的章节标记。每一章的开头有一个章节标题（同步标志），读者（接收端）通过看到这个标题知道新的一章开始了。而有些书则通过内容的模式让读者自然分辨出章节的划分，这相当于内同步法。</p>\n</blockquote>\n<h3 id=\"4）网同步\"><a href=\"#4）网同步\" class=\"headerlink\" title=\"4）网同步\"></a>4）网同步</h3><ul>\n<li>为保证通信网内各点之间的可靠通信，就必须在网内建立一个<strong>统一的时间标准</strong>，称为网同步。</li>\n<li>网同步的任务就是使得整个通信网各复接点的时钟频率和相位相互协调一致。</li>\n</ul>\n<h2 id=\"数据交换技术\"><a href=\"#数据交换技术\" class=\"headerlink\" title=\"数据交换技术\"></a>数据交换技术</h2><h3 id=\"1）电路交换\"><a href=\"#1）电路交换\" class=\"headerlink\" title=\"1）电路交换\"></a>1）电路交换</h3><blockquote>\n<p>需要长期连接，例：传统电话网络</p>\n</blockquote>\n<p>电路交换源于电话交换原理的一种交换方式。它根据一方的请求在一对站(或数据终端)之间建立的电气连接过程，在该连接被拆除之前，所建立起来的电路一直被占用着。属于电路资源的预分配。</p>\n<table>\n<thead>\n<tr>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>传输时延小</td>\n<td>接续时间长</td>\n</tr>\n<tr>\n<td>处理开销少</td>\n<td>电路利用率低</td>\n</tr>\n<tr>\n<td>对数据格式编码类型无限制</td>\n<td>通信双方必须完全兼容，不利于用户终端互通</td>\n</tr>\n<tr>\n<td></td>\n<td>呼叫失败（呼损）可能发生，如终端设备忙或交换网负载过重</td>\n</tr>\n</tbody></table>\n<h3 id=\"2）报文交换\"><a href=\"#2）报文交换\" class=\"headerlink\" title=\"2）报文交换\"></a>2）报文交换</h3><blockquote>\n<p>特点：不连续，例：早期邮件系统、传真</p>\n</blockquote>\n<p>Ａ用户欲向Ｂ用户发送数据时，<strong>Ａ用户</strong>并不需要先接通至Ｂ用户的整条电路，而只需与直接连接的交换机接通，并将需要发送的报文作为一个独立的实体，<strong>全部发送给该交换机。</strong></p>\n<p>然后该<strong>交换机将存储着的报文</strong>根据报文中提供的目的地址，在交换网内确定其路由，并将报文送到输出线路的队列中去排队，一旦该输出线路空闲，就立即将报文传送给下一个交换机。依次类推，最后送到Ｂ用户。</p>\n<p>报文交换的特点：交换机采取“存储—转发”技术对报文进行存储和处理。适用于电报业务和电子信箱业务。</p>\n<table>\n<thead>\n<tr>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>线路利用率较高</td>\n<td>数据信息通过交换网的时延较长，变化大，不利于实时或交互型业务</td>\n</tr>\n<tr>\n<td>存储—转发方式，匹配速率，防止呼叫阻塞，平滑业务量峰值</td>\n<td>交换机需大容量存储和高速分析处理功能，增加了投资费用</td>\n</tr>\n<tr>\n<td>易于实现不同类型终端之间的互通</td>\n<td></td>\n</tr>\n<tr>\n<td>不需要发、收两端同时处于激活状态</td>\n<td></td>\n</tr>\n<tr>\n<td>便于实现多种服务功能</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"3）分组交换\"><a href=\"#3）分组交换\" class=\"headerlink\" title=\"3）分组交换\"></a>3）分组交换</h3><blockquote>\n<p>特点：大规模，例：互联网数据传输</p>\n</blockquote>\n<p>分组交换(又称包交换)，是综合了电路交换和报文交换两者优点的一种交换方式</p>\n<ul>\n<li>仍采用 “存储-转发”技术。</li>\n<li>分组交换的特点同电路交换。</li>\n</ul>\n<p>分组交换将一份较长的报文分解成若干个定长的“分组”，并<strong>在每个分组前都加上报头和报尾</strong>。</p>\n<ul>\n<li>报头中含地址和分组序号等内容，</li>\n<li>报尾是该分组的校验码。</li>\n<li>分组作为一个独立的规定格式的实体，便于交换机存储、分析和处理。</li>\n<li>既可以断续地传送，也可以经历不同的传输路径。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>传输时延较小，满足交互型实时通信的要求</td>\n<td>网络附加传输信息较多，影响传输效率</td>\n</tr>\n<tr>\n<td>易于实现统计时分多路复用，提高线路利用率</td>\n<td>实现技术复杂</td>\n</tr>\n<tr>\n<td>灵活的通信环境，便于不同类型数据终端之间的互通</td>\n<td></td>\n</tr>\n<tr>\n<td>可靠性好，便于实现差错控制，误码率低（可达10⁻¹¹以下）</td>\n<td></td>\n</tr>\n<tr>\n<td>经济性好</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"差错控制技术\"><a href=\"#差错控制技术\" class=\"headerlink\" title=\"差错控制技术\"></a>差错控制技术</h2><h3 id=\"基本的差错控制方式\"><a href=\"#基本的差错控制方式\" class=\"headerlink\" title=\"基本的差错控制方式\"></a>基本的差错控制方式</h3><p>1）自动请求重发(ARQ)方式（只能检错）<br>2）前向纠错(FEC)方式（可纠错）<br>3）混合纠错(HEC)方式（即可以检错也可纠错）<br>4）不用编码的差错控制方式  </p>\n<h3 id=\"奇偶校验码\"><a href=\"#奇偶校验码\" class=\"headerlink\" title=\"奇偶校验码\"></a>奇偶校验码</h3><p>规则：将所要传送的数据信息分组，<strong>再在一组内诸信息码元后面附加一个校验码元，使得该组码元中“1”的个数成为奇数或偶数</strong>。按照此规则编成的校验码分别称为奇校验码或偶校验码。</p>\n<p>在实际应用中，奇偶校验又可分为垂直(纵向)奇偶校验、水平(横向)奇偶校验和垂直水平奇偶校验等三种。这三种奇偶校验除能检测出奇数个差错外，后两种奇偶校验尚能分别检测出突发长度小于(n-1)和n的全部突发差错。   </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071732576.jpg\" alt=\"试卷擦除_位字符CCCCCCCCCCCCCCC_001\"></p>\n<h3 id=\"循环冗余校验码\"><a href=\"#循环冗余校验码\" class=\"headerlink\" title=\"循环冗余校验码\"></a>循环冗余校验码</h3><p>基本概念解释：</p>\n<ul>\n<li>(n,k) 表示码长为n，信息码元为k的线性码</li>\n<li>其中校验码元 $r&#x3D;n-k$<br><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071733636.jpg\" alt=\"试卷擦除_信息码元_001\"><br>图中信息码元为C6 C5 C4  校验码元为C3 C2 C1 C0<br>循环冗余码的含义是：右边码组任意向右移动一位都可以在表中找到对应的码组<br>  例如：第二行0011101，向右移动一位变成0111010——刚好对应第四行</li>\n</ul>\n<p>循环码编码原理：<br>假设待编码的k位信息的码组为<br>$$M&#x3D;(m_{k-1},m_{k-2},\\cdots,m_2,m_1,m_0)$$<br>它对应的码多项式为：<br>$$M(x)&#x3D;m_{k-1}x^{k-1}+m_{k-2}x^{k-2}+\\cdots+m_2x^2+m_1x+m_0$$<br>用$x^{n-k}$乘以$M(x)$:<br>$$x^{n-k}\\bullet M(x)&#x3D;m_{k-1}x^{n-1}+m_{k-2}x^{n-2}+\\cdots+m_2x^{n-k+2}+m_1x^{n-k+1}+m_0x^{n-k}$$<br>再用给定的(n,k)循环码生成多项式$g(x)$除$x^{n-k}· M(x)$ 得到：<br>$$x^{n-k}· M(x)&#x3D;g(x)·Q(x)+R(x)$$</p>\n<p>将$R(x)$ 移到左边（这里加减法统一当作加法）</p>\n<p>$$x^{n-k}· M(x)+R(x)&#x3D;g(x)·Q(x)$$</p>\n<ul>\n<li>其中$Q(x)$的幂次与码组中信息码元对应，</li>\n<li>$R(x)$的幂次与码组中校验码对应。</li>\n</ul>\n<hr>\n<p>【例题4-5】 设待编码信息$M(X)&#x3D;110$。利用生成多项式 $g(x)&#x3D;x^4+x^3+x^2+1$ 生成(7,3)循环码。</p>\n<p>解题：</p>\n<p>已知：n&#x3D;7，k&#x3D;3</p>\n<p>第一步：将$M(X)&#x3D;110$ 转换成多项式 $M(x)&#x3D;x^2+x$</p>\n<p>第二步：$x^{n-k}\\bullet M(x)&#x3D;x^4\\bullet M(x)&#x3D;x^6+x^5$</p>\n<p>第三步：$x^{n-k}\\bullet M(x) $$  除以  $$g(xp>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071745746.png\" alt=\"image-20241107174539472\"></p>\n<blockquote>\n<p>注意这里的加法减法都是一样的，可以把减法看作加法</p>\n</blockquote>\n<p>得到的余项就是$R(x)&#x3D;x^3+1$</p>\n<p>则得到的循环码多项式为：$x^4· M(x)+R(x)&#x3D;x^6+x^5+x^3+1$</p>\n<p>然后写出对应码组为： 1101001</p>\n<h2 id=\"差错纠正\"><a href=\"#差错纠正\" class=\"headerlink\" title=\"差错纠正\"></a>差错纠正</h2><p>希望接收器能够在接收过程中，既有检错又有纠错功能的抗干扰编码，这种编码就是<strong>纠错码</strong>。</p>\n<p>一种比较简单的纠错码──汉明码。</p>\n<ul>\n<li>汉明码的码型结构与循环码相同，由信息码元和校验码元组成。发送端根据编码规则生成校验码元，接收端则按照译码规则找出差错的具体位置后自动进行纠正。<br>汉明码具有以下参数：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>码长 ( n )</td>\n<td>$n &#x3D; 2^r - 1$</td>\n</tr>\n<tr>\n<td>信息码元数 ( k )</td>\n<td>$k &#x3D; 2^r - 1 - r$</td>\n</tr>\n<tr>\n<td>检验码元数 ( r )</td>\n<td>$r &#x3D; n - k$ （其中 r 为不小于的任意数）</td>\n</tr>\n<tr>\n<td>最小码距 ( d_{min} )</td>\n<td>$d_{min} &#x3D; 3$</td>\n</tr>\n</tbody></table>\n<p>例子：判断（7，3）和（7，4）是否为汉明码</p>\n<p>解：</p>\n<ul>\n<li><p>对于（7，3）  $n &#x3D; 2^4 - 1 &#x3D;15 $ 不等于7，所以不是汉明码</p>\n</li>\n<li><p>对于（7，4）  $n &#x3D; 2^3 - 1 &#x3D;7 $ 等于7，$k &#x3D; 2^3 - 1 - 3&#x3D;4$ 所以是汉明码</p>\n</li>\n</ul>\n<p>（很多地方都很不严谨，而且很概括性，但因为是期末，所以就暂时写到这了，考完试之后有时间再仔细学一遍）</p>\n","tags":["数通","期末"]},{"title":"数据库实验","url":"/2024/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/","content":"<!--toc-->\n\n<h1 id=\"实验一：创建库表\"><a href=\"#实验一：创建库表\" class=\"headerlink\" title=\"实验一：创建库表\"></a>实验一：创建库表</h1><h3 id=\"一、实验内容\"><a href=\"#一、实验内容\" class=\"headerlink\" title=\"一、实验内容\"></a>一、实验内容</h3><p>1 熟悉SQL Server的软件环境，了解SQL Server的功能</p>\n<p>2 查看示例数据库对象。</p>\n<p>3 创建STUDENT数据库，根据学生信息、课程信息和选修信息设计学生关系、课程关系 、选课关系，并创建对应的基本表student 、course 、 SC </p>\n<h3 id=\"二、实验步骤\"><a href=\"#二、实验步骤\" class=\"headerlink\" title=\"二、实验步骤\"></a>二、实验步骤</h3><ol>\n<li><p>登录SQL Server数据库管理系统</p>\n</li>\n<li><p>熟悉SQL Server的操作环境，熟悉SQL Server支持的数据对象</p>\n</li>\n<li><p>根据需求设计学生数据库student，并创建</p>\n</li>\n<li><p>根据需求设计学生数据库的基本表student 、course 、 SC；</p>\n</li>\n<li><p>基本表录入数据；</p>\n</li>\n</ol>\n<h3 id=\"三、思考题\"><a href=\"#三、思考题\" class=\"headerlink\" title=\"三、思考题\"></a>三、思考题</h3><p>1、SQL Server 数据库管理系统有哪些版本？你了解最新的SQL Server产品吗？还有哪些著名的大型数据库管理系统软件？</p>\n<p>2、SQL Server 数据库管理系统的主要功能有那些？</p>\n<h3 id=\"四、实验报告\"><a href=\"#四、实验报告\" class=\"headerlink\" title=\"四、实验报告\"></a>四、实验报告</h3><p>对于本实验的具体内容应该包括实验预习、实验记录和实验报告三部分。其中实验预习主要按照思考题的两个问题来完成；实验记录主要包括创建库、表的两种过程；实验报告的内容及具体要求主要格式按照实验报告本上的内容要求来写。</p>\n<h2 id=\"1-创建数据库-STUDENT\"><a href=\"#1-创建数据库-STUDENT\" class=\"headerlink\" title=\"1. 创建数据库 STUDENT\"></a>1. 创建数据库 STUDENT</h2><p>点击数据库，右击</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071559746.png\" alt=\"image-20241023205226055\"></p>\n<p>新建数据库，输入库名</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071559642.png\" alt=\"image-20241023205308267\"></p>\n<h2 id=\"2-创建Student表\"><a href=\"#2-创建Student表\" class=\"headerlink\" title=\"2. 创建Student表\"></a>2. 创建Student表</h2><p>通过库直接建表：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071559094.png\" alt=\"image-20241023205358469\">)</p>\n<p>或者可以通过命令行：</p>\n<p>点击新建查询，输入以下内容</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071600194.png\" alt=\"image-20241023205452083\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student(</span><br><span class=\"line\">Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">Sname <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">Ssex <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">Sage <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">Sdept <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>输入数据，右键对应的表，编辑前200行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071600962.png\" alt=\"image-20241023205628386\"></p>\n<p>按行输入数据：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071600122.png\" alt=\"image-20241023205711197\"></p>\n<p>或者命令行输入数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Student (Sno, Sname, Ssex, Sage, Sdept)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">(<span class=\"string\">&#x27;201215121&#x27;</span>, <span class=\"string\">&#x27;李勇&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"number\">20</span>, <span class=\"string\">&#x27;CS&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;201215122&#x27;</span>, <span class=\"string\">&#x27;刘晨&#x27;</span>, <span class=\"string\">&#x27;女&#x27;</span>, <span class=\"number\">19</span>, <span class=\"string\">&#x27;CS&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;201215123&#x27;</span>, <span class=\"string\">&#x27;王敏&#x27;</span>, <span class=\"string\">&#x27;女&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;MA&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;201215125&#x27;</span>, <span class=\"string\">&#x27;张立&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"number\">19</span>, <span class=\"string\">&#x27;IS&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/totogo7/totogo7.github.io/img/202411071600662.png\" alt=\"image-20241023211145971\"></p>\n<h2 id=\"3-建立Course表\"><a href=\"#3-建立Course表\" class=\"headerlink\" title=\"3. 建立Course表\"></a>3. 建立Course表</h2><p>用命令行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Course (</span><br><span class=\"line\">    Cno <span class=\"type\">VARCHAR</span>(<span class=\"number\">4</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    Cname <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    Cpno <span class=\"type\">VARCHAR</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\">    Ccredit <span class=\"type\">SMALLINT</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>然后再使用命令行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE STUDENT</span><br><span class=\"line\">GO</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Course </span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> FK_Sn <span class=\"keyword\">FOREIGN</span> KEY(Cpno) <span class=\"keyword\">REFERENCES</span> Course(Cno) </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这一步是在 <code>Course</code> 表中添加一个外键约束，<code>Cpno</code> 列现在被定义为引用 <code>Course</code> 表中 <code>Cno</code> 列的外键。这意味着 <code>Course.Cpno</code> 中的值必须在 <code>Course.Cno</code> 列中存在，确保了数据的完整性。</p>\n<p><code>Cpno</code> 是某个课程的前置课程编号，<code>Cno</code> 是课程编号，这个外键约束可以确保前置课程必须存在于 <code>Course</code> 表中。</p>\n</blockquote>\n<p>输入数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Course (Cno, Cname, Cpno, Ccredit) </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> </span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;数据库&#x27;</span>, <span class=\"keyword\">NULL</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"keyword\">NULL</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;信息系统&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">4</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;操作系统&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;数据结构&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"number\">4</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;数据处理&#x27;</span>, <span class=\"keyword\">NULL</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;PASCAL语言&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-建立SC表\"><a href=\"#4-建立SC表\" class=\"headerlink\" title=\"4. 建立SC表\"></a>4. 建立SC表</h2><p>使用命令行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> SC(</span><br><span class=\"line\">Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>),</span><br><span class=\"line\">Cno <span class=\"type\">varCHAR</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\">Grade <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(Sno,Cno)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>然后添加约束：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE STUDENT;</span><br><span class=\"line\">GO</span><br><span class=\"line\"><span class=\"comment\">-- 添加外键约束 FK_Sno，引用 Student(Sno)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> SC </span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> FK_Sno <span class=\"keyword\">FOREIGN</span> KEY(Sno) <span class=\"keyword\">REFERENCES</span> Student(Sno);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加外键约束 FK_Cno，引用 Course(Cno)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> SC </span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> FK_Cno <span class=\"keyword\">FOREIGN</span> KEY(Cno) <span class=\"keyword\">REFERENCES</span> Course(Cno);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><strong><code>REFERENCES Student(Sno)</code></strong>: 表示 <code>SC</code> 表中的 <code>Sno</code> 外键引用了 <code>Student</code> 表中的 <code>Sno</code> 列，要求 <code>SC</code> 表中插入的每个 <code>Sno</code> 值必须在 <code>Student</code> 表中存在。换句话说，如果在 <code>Student</code> 表中没有对应的 <code>Sno</code>，就无法将该值插入到 <code>SC</code> 表。</li>\n<li><strong><code>REFERENCES Student(Cno)</code></strong>: 确保 <code>SC</code> 表中的 <code>Cno</code>（课程编号）必须是 <code>Course</code> 表中的有效课程编号。</li>\n</ul>\n</blockquote>\n<p>输入数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SC (Sno, Cno, Grade) </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> </span><br><span class=\"line\">(<span class=\"string\">&#x27;201215122&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">90</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;201215121&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">92</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;201215121&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">85</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;201215121&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;201215122&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"number\">80</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h2><p>1、<strong>SQL Server 数据库管理系统的版本</strong>：</p>\n<ul>\n<li><strong>主要版本</strong>：Enterprise、Standard、Web、Express、Developer。</li>\n<li><strong>最新版本</strong>：SQL Server 2022，集成 Azure、改进性能和安全性。</li>\n<li><strong>其他大型数据库管理系统</strong>：Oracle、MySQL、PostgreSQL、IBM Db2、MongoDB。</li>\n</ul>\n<p> 2、<strong>SQL Server 的主要功能</strong>：</p>\n<ul>\n<li><strong>数据存储与管理</strong>：关系型数据管理、表和索引创建。</li>\n<li><strong>查询与分析</strong>：T-SQL 查询语言和查询优化。</li>\n<li><strong>事务与并发控制</strong>：支持 ACID 事务和并发控制。</li>\n<li><strong>数据安全</strong>：加密、权限管理和安全认证。</li>\n<li><strong>高可用性</strong>：Always On、备份与恢复。</li>\n<li><strong>数据集成</strong>：ETL、云数据同步。</li>\n<li><strong>性能监控</strong>：工具优化和性能监控。</li>\n</ul>\n<p>（time：2024.10.23）</p>\n<hr>\n<h1 id=\"实验二：SQL语言使用\"><a href=\"#实验二：SQL语言使用\" class=\"headerlink\" title=\"实验二：SQL语言使用\"></a>实验二：SQL语言使用</h1><h3 id=\"一、实验内容-1\"><a href=\"#一、实验内容-1\" class=\"headerlink\" title=\"一、实验内容\"></a>一、实验内容</h3><p>第一部分：</p>\n<p>1 使用上次实验创建的数据库和表，利用企业管理器或查询分析器向基本表中插入实验数据。</p>\n<p>第二部分：</p>\n<p>2 查询全体学生学号和姓名</p>\n<p>3 查询全体学生学号、姓名、性别、年龄和所在系</p>\n<p>4 查询全体学生选课情况，即学号、课程号、成绩</p>\n<p>5 显示所有选课学生的学号，并取掉重复行</p>\n<p>6 查询成绩大于80分的学生的学号、课程号、成绩</p>\n<p>7 查询计算机系全体学生的学号</p>\n<p>8 查询计算机系年龄在18岁以上的学生的学号、姓名</p>\n<p>9 查询选修了数据库课程或数据结构课程学生的学号、成绩</p>\n<p>10 查询选修了C1课程的学生的学号和成绩，查询结果按成绩降序排序</p>\n<p>11 查询每个学生的学号、姓名、选修的课程名、成绩</p>\n<p>12 查询与‘李勇’在同一个系学习的学生学号、姓名</p>\n<p>13 查询选修了3门以上课程的学生学号</p>\n<p>14 查询没有选修课程的学生的基本信息</p>\n<p>15 找出平均成绩在85分以上的学生，结果按系分组，并按平均成绩的升序排列</p>\n<p>16查询选修课程平均成绩在80分以上的学生学号</p>\n<p>17查询数据结构课程的先行课的先行课课程名</p>\n<p>18 查询同时选修《数据库》和《数据结构》两门课程的学生姓名</p>\n<p>19 查询每个系的平均年龄，并建立视图</p>\n<p>20 建立课程的先修课程的视图</p>\n<h3 id=\"二、思考题\"><a href=\"#二、思考题\" class=\"headerlink\" title=\"二、思考题\"></a>二、思考题</h3><p>1、对于实验任务的完成，SQL Server 提供了哪些方法或工具？</p>\n<p>2、请考虑SQL Server 的企业管理器和查询分析器中用SQL语句两种方法完成任务的场合和优缺点。</p>\n<hr>\n<h2 id=\"题目1\"><a href=\"#题目1\" class=\"headerlink\" title=\"题目1\"></a>题目1</h2><p>1 使用上次实验创建的数据库和表，利用企业管理器或查询分析器向基本表中插入实验数据。</p>\n<p>第二部分：</p>\n<h2 id=\"题目2\"><a href=\"#题目2\" class=\"headerlink\" title=\"题目2\"></a>题目2</h2><p>2 查询全体学生学号和姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Sname</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student;</span><br></pre></td></tr></table></figure>\n\n\n<p>3 查询全体学生学号、姓名、性别、年龄和所在系</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Sname, Ssex, Sage, Sdept</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"题目4\"><a href=\"#题目4\" class=\"headerlink\" title=\"题目4\"></a>题目4</h2><p>4 查询全体学生选课情况，即学号、课程号、成绩 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Cno, Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"题目5\"><a href=\"#题目5\" class=\"headerlink\" title=\"题目5\"></a>题目5</h2><p>5 显示所有选课学生的学号，并取掉重复行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> Sno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目6\"><a href=\"#题目6\" class=\"headerlink\" title=\"题目6\"></a>题目6</h2><p>6 查询成绩大于80分的学生的学号、课程号、成绩</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Cno, Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Grade <span class=\"operator\">&gt;</span> <span class=\"number\">80</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目7\"><a href=\"#题目7\" class=\"headerlink\" title=\"题目7\"></a>题目7</h2><p>7 查询计算机系全体学生的学号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span>;   <span class=\"comment\">--单引号</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"题目8\"><a href=\"#题目8\" class=\"headerlink\" title=\"题目8\"></a>题目8</h2><p>8 查询计算机系年龄在18岁以上的学生的学号、姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Sname</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept <span class=\"operator\">=</span> <span class=\"string\">&#x27;CS&#x27;</span> <span class=\"keyword\">AND</span> Sage <span class=\"operator\">&gt;</span> <span class=\"number\">18</span>;  <span class=\"comment\">--用AND</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目9\"><a href=\"#题目9\" class=\"headerlink\" title=\"题目9\"></a>题目9</h2><p>9 查询选修了数据库课程或数据结构课程学生的学号、成绩</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">OR</span> Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;5&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目10\"><a href=\"#题目10\" class=\"headerlink\" title=\"题目10\"></a>题目10</h2><p>10 查询选修了C1课程的学生的学号和成绩，查询结果按成绩降序排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Grade <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目11\"><a href=\"#题目11\" class=\"headerlink\" title=\"题目11\"></a>题目11</h2><p>11 查询每个学生的学号、姓名、选修的课程名、成绩</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Student.Sno, Student.Sname, Course.Cname, SC.Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> SC <span class=\"keyword\">ON</span> Student.Sno <span class=\"operator\">=</span> SC.Sno</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> Course <span class=\"keyword\">ON</span> SC.Cno <span class=\"operator\">=</span> Course.Cno;</span><br></pre></td></tr></table></figure>\n\n<p>看了一下书，书上是用where语句，并没有用join</p>\n<p>按照书上可以这样写：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Student.Sno, Student.Sname, Course.Cname, SC.Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student, SC, Course</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Student.Sno <span class=\"operator\">=</span> SC.Sno</span><br><span class=\"line\">  <span class=\"keyword\">AND</span> SC.Cno <span class=\"operator\">=</span> Course.Cno;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"题目12\"><a href=\"#题目12\" class=\"headerlink\" title=\"题目12\"></a>题目12</h2><p>12 查询与‘李勇’在同一个系学习的学生学号、姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno, Sname</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept <span class=\"operator\">=</span> (<span class=\"keyword\">SELECT</span> Sdept <span class=\"keyword\">FROM</span> Student <span class=\"keyword\">WHERE</span> Sname <span class=\"operator\">=</span> <span class=\"string\">&#x27;李勇&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目13\"><a href=\"#题目13\" class=\"headerlink\" title=\"题目13\"></a>题目13</h2><p>13 查询选修了3门以上课程的学生学号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Sno <span class=\"operator\">/</span><span class=\"operator\">/</span>根据学号进行分组</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(Cno) <span class=\"operator\">&gt;</span> <span class=\"number\">3</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>筛选学号中满足特定条件的组</span><br></pre></td></tr></table></figure>\n<p><code>HAVING</code> 子句用于 <strong>过滤分组后的数据</strong>，通常和 <code>GROUP BY</code> 子句一起使用。它的作用类似于 <code>WHERE</code>，但不同之处在于：</p>\n<ul>\n<li><code>WHERE</code> 子句用于在 <strong>分组之前</strong> 对数据进行过滤。</li>\n<li><code>HAVING</code> 子句用于在 <strong>分组之后</strong> 对分组结果进行过滤。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>对比维度</strong></th>\n<th><strong>GROUP BY</strong></th>\n<th><strong>ORDER BY</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>作用</strong></td>\n<td>对查询结果按指定列进行<strong>分组</strong>。</td>\n<td>对查询结果按指定列进行<strong>排序</strong>。</td>\n</tr>\n<tr>\n<td><strong>常用场景</strong></td>\n<td>与聚合函数一起使用，如 <code>COUNT()</code>、<code>SUM()</code>、<code>AVG()</code> 等。</td>\n<td>用于控制查询结果集的显示顺序。</td>\n</tr>\n<tr>\n<td><strong>是否影响结果内容</strong></td>\n<td><strong>是</strong>，对结果进行分组后，每组只返回一条汇总数据。</td>\n<td><strong>否</strong>，不改变结果内容，只改变结果的顺序。</td>\n</tr>\n<tr>\n<td><strong>常用子句&#x2F;函数</strong></td>\n<td>常与 <code>HAVING</code> 和聚合函数（如 <code>SUM()</code>、<code>COUNT()</code>）结合使用。</td>\n<td>常与 <code>ASC</code>（升序）、<code>DESC</code>（降序）结合使用。</td>\n</tr>\n<tr>\n<td><strong>位置</strong></td>\n<td>位于 <code>SELECT</code> 之后，<code>ORDER BY</code> 之前。</td>\n<td>通常是查询语句的最后一个子句。</td>\n</tr>\n<tr>\n<td><strong>示例</strong></td>\n<td><code>sql SELECT Sdept, AVG(Sage) FROM Student GROUP BY Sdept; </code></td>\n<td><code>sql SELECT Sname, Sage FROM Student ORDER BY Sage DESC; </code></td>\n</tr>\n<tr>\n<td><strong>应用的列</strong></td>\n<td>必须是 <code>SELECT</code> 中未聚合的列或计算结果。</td>\n<td>可以是任意列或表达式，即使它不在 <code>SELECT</code> 中出现。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong><code>GROUP BY</code></strong> 用于对数据进行分组，并计算每个分组的汇总信息。</li>\n<li><strong><code>ORDER BY</code></strong> 用于对查询结果进行排序，不改变数据，只改变结果的排列顺序。</li>\n</ul>\n<h2 id=\"题目14\"><a href=\"#题目14\" class=\"headerlink\" title=\"题目14\"></a>题目14</h2><p>14 查询没有选修课程的学生的基本信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sno <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> Sno <span class=\"keyword\">FROM</span> SC);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目15\"><a href=\"#题目15\" class=\"headerlink\" title=\"题目15\"></a>题目15</h2><p>15 找出平均成绩在85分以上的学生，结果按系分组，并按平均成绩的升序排列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Student.Sdept, Student.Sno, <span class=\"built_in\">AVG</span>(SC.Grade) <span class=\"keyword\">AS</span> AvgGrade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> SC <span class=\"keyword\">ON</span> Student.Sno <span class=\"operator\">=</span> SC.Sno</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Student.Sdept, Student.Sno </span><br><span class=\"line\"><span class=\"comment\">--根据学生的系别（`Sdept`）和学号（`Sno`）对结果进行分组。</span></span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">AVG</span>(SC.Grade) <span class=\"operator\">&gt;</span> <span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> AvgGrade <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n<p>&#x2F;&#x2F;**<code>AVG(SC.Grade) AS AvgGrade</code>**：计算每个学生的平均成绩，并将结果命名为 <code>AvgGrade</code>。</p>\n<ul>\n<li>使用 <code>JOIN</code> 关键字将 <code>Student</code> 表和 <code>SC</code> 表连接在一起。</li>\n<li><code>ON Student.Sno = SC.Sno</code>：指定连接条件，即通过学号（<code>Sno</code>）将两张表关联起来。这样可以获取每个学生的成绩信息。</li>\n</ul>\n<p>用where语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Student.Sdept, Student.Sno, <span class=\"built_in\">AVG</span>(SC.Grade) <span class=\"keyword\">AS</span> AvgGrade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student, SC </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Student.Sno <span class=\"operator\">=</span> SC.Sno</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Student.Sdept, Student.Sno </span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">AVG</span>(SC.Grade) <span class=\"operator\">&gt;</span> <span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> AvgGrade <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"题目16\"><a href=\"#题目16\" class=\"headerlink\" title=\"题目16\"></a>题目16</h2><p>16 查询选修课程平均成绩在80分以上的学生学号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Sno</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">AVG</span>(Grade) <span class=\"operator\">&gt;</span> <span class=\"number\">80</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"题目17\"><a href=\"#题目17\" class=\"headerlink\" title=\"题目17\"></a>题目17</h2><p>17查询数据结构课程的先行课的先行课课程名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> C2.Cname <span class=\"keyword\">AS</span> PrePreCourse</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Course C1  <span class=\"operator\">/</span><span class=\"operator\">/</span>指定数据源为 `Course` 表，并给它一个别名 `C1`。这个别名用于后续的引用</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> Course C2 <span class=\"keyword\">ON</span> C1.Cpno <span class=\"operator\">=</span> C2.Cno</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C1.Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;5&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>JOIN</code> 允许我们把 <code>Course C1</code> 和 <code>Course C2</code> 的相关信息组合起来，这样我们就能从查询到的结果中返回前置课程的名称，而不是编号。</p>\n</li>\n<li><p>最终，我们根据 <code>C1.Cno = &#39;5&#39;</code> 的条件，查询编号为 <code>5</code> 的课程的前置课程，并通过 <code>JOIN</code> 得到前置课程的名称。</p>\n<p>用where语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> C2.Cname <span class=\"keyword\">AS</span> PrePreCourse</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Course C1, Course C2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C1.Cpno <span class=\"operator\">=</span> C2.Cno</span><br><span class=\"line\">  <span class=\"keyword\">AND</span> C1.Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;5&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"题目18\"><a href=\"#题目18\" class=\"headerlink\" title=\"题目18\"></a>题目18</h2><p>18 查询同时选修《数据库》和《数据结构》两门课程的学生姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sname </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC <span class=\"keyword\">AS</span> SC1</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> SC <span class=\"keyword\">AS</span> SC2 <span class=\"keyword\">ON</span> SC1.Sno <span class=\"operator\">=</span> SC2.Sno</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> Student  <span class=\"keyword\">ON</span> SC1.Sno <span class=\"operator\">=</span> Student.Sno</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SC1.Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">AND</span> SC2.Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;5&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p> <code>JOIN SC AS SC2 ON SC1.Sno = SC2.Sno</code>：</p>\n<ul>\n<li>通过这个 <code>JOIN</code>，我们确保 <code>SC1</code> 和 <code>SC2</code> 中的 <code>Sno</code>（学生编号）是相同的，表示同一个学生。</li>\n</ul>\n<p> <code>JOIN Student ON SC1.Sno=Student.Sno </code>：</p>\n<ul>\n<li>在这一步，我们将 <code>SC</code> 表和 <code>Student</code> 表连接起来，关联 <code>SC1.Sno</code> 和 <code>Student</code> 表中的 <code>Sno</code>。</li>\n</ul>\n<p>用where语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sname</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC <span class=\"keyword\">AS</span> SC1, SC <span class=\"keyword\">AS</span> SC2, Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SC1.Sno <span class=\"operator\">=</span> SC2.Sno</span><br><span class=\"line\">  <span class=\"keyword\">AND</span> SC1.Sno <span class=\"operator\">=</span> Student.Sno</span><br><span class=\"line\">  <span class=\"keyword\">AND</span> SC1.Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AND</span> SC2.Cno <span class=\"operator\">=</span> <span class=\"string\">&#x27;5&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"题目19\"><a href=\"#题目19\" class=\"headerlink\" title=\"题目19\"></a>题目19</h2><p>19 查询每个系的平均年龄，并建立视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> AvgAgeByDept <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Sdept, <span class=\"built_in\">AVG</span>(Sage) <span class=\"keyword\">AS</span> AvgAge</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Sdept;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>GREATE VIEW创建视图，后面是自定义的名称，AS表示后面讲定义这个视图的查询内容<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> AvgAgeByDept;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"题目20\"><a href=\"#题目20\" class=\"headerlink\" title=\"题目20\"></a>题目20</h2><p>20 建立课程的先修课程的视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> PrerequisiteCourses <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> C1.Cno <span class=\"keyword\">AS</span> CourseNo, C1.Cname <span class=\"keyword\">AS</span> CourseName, C2.Cname <span class=\"keyword\">AS</span> PrerequisiteName</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Course C1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Course C2 <span class=\"keyword\">ON</span> C1.Cpno <span class=\"operator\">=</span> C2.Cno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LEFT JOIN</code> 是 SQL 中的一种连接操作，用于将两个表中的数据结合起来。具体来说，<code>LEFT JOIN</code> 会返回左侧表（在这个例子中是 <code>Course C1</code>）的所有记录，以及右侧表（在这个例子中是 <code>Course C2</code>）中符合连接条件的记录。如果右侧表中没有符合条件的记录，则结果中将包含左侧表的记录和右侧表中对应列的 <code>NULL</code> 值。</li>\n<li><strong>Course C2</strong>：这是右侧表的名称（即你要连接的表）。在这里，你正在连接的表是 <code>Course</code>，并将其命名为 <code>C2</code>。</li>\n<li><strong>ON C1.Cpno &#x3D; C2.Cno</strong>：这是连接条件，指定了如何将左侧表（<code>C1</code>）和右侧表（<code>C2</code>）进行匹配。<ul>\n<li><ul>\n<li>从 <code>C1</code> 表中的 <code>Cpno</code> 列（通常表示课程的先修课程编号）与 <code>C2</code> 表中的 <code>Cno</code> 列（表示课程编号）进行比较。</li>\n</ul>\n</li>\n<li>只有当 <code>C1.Cpno</code> 的值与 <code>C2.Cno</code> 的值相等时，才会将这两个表中的记录组合在一起。<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> PrerequisiteCourses;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、思考题-1\"><a href=\"#二、思考题-1\" class=\"headerlink\" title=\"二、思考题\"></a>二、思考题</h2><p>1、对于实验任务的完成，SQL Server 提供了哪些方法或工具？</p>\n<p>2、请考虑SQL Server 的企业管理器和查询分析器中用SQL语句两种方法完成任务的场合和优缺点。</p>\n<p>1、SQL Server 提供了哪些方法或工具？</p>\n<table>\n<thead>\n<tr>\n<th>工具&#x2F;方法</th>\n<th>描述</th>\n<th>适用场合</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>SQL Server Management Studio (SSMS)</strong></td>\n<td>一个集成环境，用于管理 SQL Server 和 Azure SQL 数据库。</td>\n<td>- 数据库管理<br>- 编写和执行 SQL 查询<br>- 数据备份和恢复</td>\n</tr>\n<tr>\n<td><strong>SQL Server Data Tools (SSDT)</strong></td>\n<td>用于数据库开发和管理的工具，支持项目和解决方案。</td>\n<td>- 开发和测试 SQL Server 数据库项目<br>- 集成到 Visual Studio</td>\n</tr>\n<tr>\n<td><strong>SQL Server Profiler</strong></td>\n<td>用于监控 SQL Server 的工具，可以跟踪和分析 SQL 事件。</td>\n<td>- 性能监控<br>- 调试存储过程和查询</td>\n</tr>\n<tr>\n<td><strong>Transact-SQL (T-SQL)</strong></td>\n<td>SQL Server 的扩展 SQL 语言，支持复杂查询和逻辑。</td>\n<td>- 数据查询<br>- 数据修改和管理</td>\n</tr>\n<tr>\n<td><strong>SQL Server Agent</strong></td>\n<td>任务调度和作业管理工具，用于自动化常规任务。</td>\n<td>- 定时备份<br>- 自动化报告生成</td>\n</tr>\n<tr>\n<td><strong>SQLCMD</strong></td>\n<td>命令行工具，用于与 SQL Server 进行交互。</td>\n<td>- 批量执行 SQL 脚本<br>- 自动化任务</td>\n</tr>\n<tr>\n<td><strong>Enterprise Manager</strong></td>\n<td>旧版 SQL Server 的管理工具，提供数据库和服务器管理功能。</td>\n<td>- 基本数据库管理和监控</td>\n</tr>\n<tr>\n<td><strong>Power BI</strong></td>\n<td>数据可视化工具，用于将 SQL Server 数据可视化。</td>\n<td>- 数据分析<br>- 报告和仪表盘创建</td>\n</tr>\n</tbody></table>\n<p>2、请考虑SQL Server 的企业管理器和查询分析器中用SQL语句两种方法完成任务的场合和优缺点。</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>企业管理器</th>\n<th>查询分析器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>使用场合</strong></td>\n<td>- 适合不熟悉 SQL 语法的用户</td>\n<td>- 适合需要执行复杂查询或脚本的用户</td>\n</tr>\n<tr>\n<td></td>\n<td>- 适合进行简单的数据库管理任务</td>\n<td>- 适合进行批量操作和数据分析</td>\n</tr>\n<tr>\n<td><strong>优点</strong></td>\n<td>- 界面友好，操作简单，易于上手</td>\n<td>- 支持复杂的 SQL 语句，能够执行多行和多条语句</td>\n</tr>\n<tr>\n<td></td>\n<td>- 具备可视化工具，如拖放功能，便于构建查询和报告</td>\n<td>- 支持脚本和存储过程的调试</td>\n</tr>\n<tr>\n<td></td>\n<td>- 方便进行数据的导入和导出，用户管理等任务</td>\n<td>- 可以直接执行和测试 SQL 查询，实时反馈查询结果</td>\n</tr>\n<tr>\n<td></td>\n<td>- 提供了数据模型视图，便于理解数据库结构</td>\n<td>- 可用强大的编辑功能，如语法高亮、代码补全</td>\n</tr>\n<tr>\n<td><strong>缺点</strong></td>\n<td>- 对于复杂查询支持有限，难以处理复杂的 SQL 逻辑</td>\n<td>- 界面较为简陋，对于新手用户学习成本较高</td>\n</tr>\n<tr>\n<td></td>\n<td>- 不适合批量数据处理和大规模的数据迁移</td>\n<td>- 缺乏直观的可视化工具，数据管理不如企业管理器方便</td>\n</tr>\n<tr>\n<td></td>\n<td>- 一些高级功能难以通过 GUI 完成</td>\n<td>- 执行错误的 SQL 语句可能导致数据损坏，风险较高</td>\n</tr>\n<tr>\n<td><strong>总结</strong></td>\n<td>- 适合进行简单的数据库操作，适合新手</td>\n<td>- 适合需要精细控制和复杂操作的用户</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、实验报告\"><a href=\"#三、实验报告\" class=\"headerlink\" title=\"三、实验报告\"></a>三、实验报告</h2><p>对于本实验的具体内容应该包括实验预习、实验记录和实验报告三部分。其中实验预习首先要思考以上的两个问题，第二要把熟悉相关的SQL语句；实验记录主要包括向基本表输入信息，查询的结果显示等步骤；实验报告的内容及具体要求主要格式按照实验报告本上的内容要求来写。</p>\n<p>（time: 2024&#x2F;10&#x2F;24) </p>\n<p>修正1：2024.10.31 </p>\n","tags":["实验","数据库","SQL"]},{"title":"java实验三题目&代码","url":"/2024/10/25/Java%E5%AE%9E%E9%AA%8C%E4%B8%89/","content":"<!--toc-->\n\n\n\n<h1 id=\"实验三：Java-面向对象编程及多线程\"><a href=\"#实验三：Java-面向对象编程及多线程\" class=\"headerlink\" title=\"实验三：Java 面向对象编程及多线程\"></a>实验三：Java 面向对象编程及多线程</h1><h3 id=\"一、实验内容\"><a href=\"#一、实验内容\" class=\"headerlink\" title=\"一、实验内容\"></a>一、实验内容</h3><p>该实验项目内容包括：多态性与动态绑定；包的使用与访问控制；接口的实现<br>与运用。线程的创建和使用；掌握方法覆盖的使用。</p>\n<h3 id=\"二、实验步骤\"><a href=\"#二、实验步骤\" class=\"headerlink\" title=\"二、实验步骤\"></a>二、实验步骤</h3><p> 1、总体任务</p>\n<ul>\n<li>编写程序实现多态性与动态绑定，掌握方法覆盖的使用。</li>\n<li>编写程序掌握线程的创建和使用。</li>\n<li>实现并运用接口。</li>\n<li>编译、调试并验证结果。</li>\n<li>其他内容（根据个人情况确定）。</li>\n</ul>\n<p>2、具体实验程序<br>（1） 设计三个类，分别是学生类 Student、本科生类 Undergraduate、研究生类 Postgraduate，其中 Student 类是一个抽象类，包含一些基本的学生信息如姓名、所学课程、课程成绩等。Undergraduate 类和 Postgraduate 类均为 Student 的子类，它们之间的主要差别在于课程成绩等级的计算方法有所不同。具体成绩等级标准如下：</p>\n<table>\n<thead>\n<tr>\n<th>本科生标准</th>\n<th>研究生标准</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>80-100 优秀</td>\n<td>90-100 优秀</td>\n</tr>\n<tr>\n<td>70-80 良好</td>\n<td>80-90 良好</td>\n</tr>\n<tr>\n<td>60-70 一般</td>\n<td>70-80 一般</td>\n</tr>\n<tr>\n<td>50-60 及格</td>\n<td>60-70 及格</td>\n</tr>\n<tr>\n<td>50 以下 不及格</td>\n<td>60 以下 不及格</td>\n</tr>\n<tr>\n<td>其中假设某班级既有本科生也有研究生，编写程序统计出全班学生的成绩等级并显示出来。此题的关键是设计一个既能存放本科生对象又能存放研究生对象的学生数组。</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>完成上述功能的代码编写，并给出运行结果。</li>\n<li>在环境中编译运行程序，确定哪个 .class 文件是可运行的。 </li>\n<li>模仿程序，新增一个高中生类 HighSchooler，其成绩等级计算标准为： <ul>\n<li>80~100 好 </li>\n<li>60~80 中 </li>\n<li>60 以下 差</li>\n</ul>\n</li>\n</ul>\n<p>（2）编写应用程序，创建一个文件输出流，向文件中分别写入以下类型数据：int、double 和字符串串，然后创建一个文件输入流，将文件中写入的数据显示在屏幕上。</p>\n<p>（3） 编写一个类 MyThread，它继承自 Thread 类：类中定义一个长整型变量delay；还定义有两个参数的构造方法，第 1 个参数 str 是 String 类型，通过 super(str)调用父类构造方法给线程命名，第 2 个参数 delay 是长整型，用来初始化类中的变量delay。MyThread 类中的 run 方法如下实现：循环 3 次，每次先在命令行输出线程第几次运行，然后休眠 delay 毫秒，循环结束后输出该线程结束的信息。编写应用程序TestThread.java，在其 main 方法中创建 MyThread 类的三个对象 t1、t2、t3，分别指定线程名字为“线程 A”、“线程 B”和“线程 C”，休眠时间为 1000 毫秒、2000 毫秒、3000 毫秒，并启动这三个线程，main 方法的最后输出当前活动线程的数目。</p>\n<p>（4）设计和实现一个 Soundable 接口，该接口具有发声功能，同时还能够调节声音大小。Soundable接口的这些功能将会由3种声音设备来具体实现，它们分别是收音机 Radio、随身听Walkman和手机Mobilephone。最后还要设计一个应用程序类来使用这些实现了Soundable 接口的声音设备类。程序运行时，先询问用户想听哪种设备，然后程序就会按照该设备的工作方式来发出声音。<br>    (a)环境中进行编译，编译的结果将会产生哪些个class文件，分别是哪些？为什么？<br>    (b) 编译之后运行程序，观察所得结果。<br>    (c) 现在假定要为程序增加一个闹钟类Clock，该类也实现 Soundable 接口， 能够发出滴答声，请将以下的Clock类加入到测试类中，修改之后，重新编译并运行，记录结果。</p>\n<ol>\n<li>现在请模仿本实验的程序设计出一个自己的接口程序，要求先设计一个moveable 可移动接口，然后分别设计 3 个线程 , 即汽车 Car 、轮船 Ship 、飞机Aircraft 来实现该接口，在测试类中可以创建多个线程，启用线程完成各自的工作（用不同的方式创建这些线程）。</li>\n</ol>\n<h3 id=\"三、思考题\"><a href=\"#三、思考题\" class=\"headerlink\" title=\"三、思考题\"></a>三、思考题</h3><ol>\n<li>接口与抽象类的区别是什么？</li>\n<li>如何创建线程？有几种方法？</li>\n</ol>\n<h2 id=\"第一题：设计三个类\"><a href=\"#第一题：设计三个类\" class=\"headerlink\" title=\"第一题：设计三个类\"></a>第一题：设计三个类</h2><p>设计三个类，分别是学生类 Student、本科生类 Undergraduate、研究生类 Postgraduate，其中 Student 类是一个抽象类，包含一些基本的学生信息如姓名、所学课程、课程成绩等。Undergraduate 类和 Postgraduate 类均为 Student 的子类，它们之间的主要差别在于课程成绩等级的计算方法有所不同。</p>\n<h3 id=\"创建抽象类Student\"><a href=\"#创建抽象类Student\" class=\"headerlink\" title=\"创建抽象类Student\"></a>创建抽象类Student</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name; <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String course; <span class=\"comment\">//课程</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">double</span> score;  <span class=\"comment\">//成绩</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.course = course;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//getter方法，用于返回学生姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCourse</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> course;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getScore</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建本科生类\"><a href=\"#创建本科生类\" class=\"headerlink\" title=\"创建本科生类\"></a>创建本科生类</h3><p>继承Student类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Undergraduate</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//`Postgraduate` 类也是继承自 `Student` 类。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Undergraduate</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, course, score);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;优秀&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;良好&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;一般&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">50</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;及格&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;不及格&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建研究生类\"><a href=\"#创建研究生类\" class=\"headerlink\" title=\"创建研究生类\"></a>创建研究生类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Undergraduate</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Undergraduate</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, course, score);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;优秀&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;良好&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;一般&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">50</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;及格&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;不及格&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建高中生类\"><a href=\"#创建高中生类\" class=\"headerlink\" title=\"创建高中生类\"></a>创建高中生类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HighSchooler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HighSchooler</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, course, score);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;好&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;中&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;差&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主程序\"><a href=\"#主程序\" class=\"headerlink\" title=\"主程序\"></a>主程序</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Student[] students = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        students[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Undergraduate</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Math&quot;</span>, <span class=\"number\">85</span>);</span><br><span class=\"line\">        students[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Undergraduate</span>(<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Science&quot;</span>, <span class=\"number\">72</span>);</span><br><span class=\"line\">        students[<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Postgraduate</span>(<span class=\"string\">&quot;Charlie&quot;</span>, <span class=\"string\">&quot;Math&quot;</span>, <span class=\"number\">92</span>);</span><br><span class=\"line\">        students[<span class=\"number\">3</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Postgraduate</span>(<span class=\"string\">&quot;Daisy&quot;</span>, <span class=\"string\">&quot;Science&quot;</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">        students[<span class=\"number\">4</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">HighSchooler</span>(<span class=\"string\">&quot;Eve&quot;</span>, <span class=\"string\">&quot;English&quot;</span>, <span class=\"number\">75</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;全班学生成绩等级：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Student student : students) &#123;</span><br><span class=\"line\">            System.out.println(student.getName() + <span class=\"string\">&quot; (&quot;</span> + student.getCourse() + <span class=\"string\">&quot;): &quot;</span> + student.getGrade());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总代码：\"><a href=\"#总代码：\" class=\"headerlink\" title=\"总代码：\"></a>总代码：</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Student.java  </span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String course;  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">double</span> score;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.course = course;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.score = score;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCourse</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> course;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getScore</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> score;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// Undergraduate.java  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Undergraduate</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Student</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Undergraduate</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, course, score);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;优秀&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;良好&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;一般&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">50</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;及格&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;不及格&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// Postgraduate.java  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Postgraduate</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Student</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Postgraduate</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, course, score);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">90</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;优秀&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;良好&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;一般&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;及格&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;不及格&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// HighSchooler.java  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HighSchooler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Student</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HighSchooler</span><span class=\"params\">(String name, String course, <span class=\"type\">double</span> score)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, course, score);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGrade</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;好&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;中&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;差&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// Main.java  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        Student[] students = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>[<span class=\"number\">5</span>];  </span><br><span class=\"line\">        students[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Undergraduate</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Math&quot;</span>, <span class=\"number\">85</span>);  </span><br><span class=\"line\">        students[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Undergraduate</span>(<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Science&quot;</span>, <span class=\"number\">72</span>);  </span><br><span class=\"line\">        students[<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Postgraduate</span>(<span class=\"string\">&quot;Charlie&quot;</span>, <span class=\"string\">&quot;Math&quot;</span>, <span class=\"number\">92</span>);  </span><br><span class=\"line\">        students[<span class=\"number\">3</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">Postgraduate</span>(<span class=\"string\">&quot;Daisy&quot;</span>, <span class=\"string\">&quot;Science&quot;</span>, <span class=\"number\">65</span>);  </span><br><span class=\"line\">        students[<span class=\"number\">4</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">HighSchooler</span>(<span class=\"string\">&quot;Eve&quot;</span>, <span class=\"string\">&quot;English&quot;</span>, <span class=\"number\">75</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;全班学生成绩等级：&quot;</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Student student : students) &#123;  </span><br><span class=\"line\">            System.out.println(student.getName() + <span class=\"string\">&quot; (&quot;</span> + student.getCourse() + <span class=\"string\">&quot;): &quot;</span> + student.getGrade());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二题：创建文件输出流\"><a href=\"#第二题：创建文件输出流\" class=\"headerlink\" title=\"第二题：创建文件输出流\"></a>第二题：创建文件输出流</h2><p>题目：编写应用程序，创建一个文件输出流，向文件中分别写入以下类型数据：int、double 和字符串串，然后创建一个文件输入流，将文件中写入的数据显示在屏幕上。</p>\n<h3 id=\"编写输入数据的代码\"><a href=\"#编写输入数据的代码\" class=\"headerlink\" title=\"编写输入数据的代码\"></a>编写输入数据的代码</h3><p>定义要写入的文件名，然后写入文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileReadWriteExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;data.txt&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 写入数据到文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataOutputStream</span> <span class=\"variable\">dataOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(fileName))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 写入 int 类型数据</span></span><br><span class=\"line\">            dataOutputStream.writeInt(<span class=\"number\">42</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 写入 double 类型数据</span></span><br><span class=\"line\">            dataOutputStream.writeDouble(<span class=\"number\">3.14159</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 写入字符串</span></span><br><span class=\"line\">            dataOutputStream.writeUTF(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;数据已成功写入文件 &quot;</span> + fileName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;写入文件时发生错误: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li><code>try (DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream(fileName)))</code>:<ul>\n<li>创建一个 <code>FileOutputStream</code> 对象，用于向指定的文件（<code>fileName</code>）写入字节。</li>\n<li>将 <code>FileOutputStream</code> 作为参数传递给 <code>DataOutputStream</code>，后者是一个数据输出流，能够写入 Java 的基本数据类型（如 <code>int</code>、<code>double</code> 等）以及字符串。</li>\n</ul>\n</li>\n<li><strong><code>dataOutputStream.writeInt(42)</code></strong>:<ul>\n<li>调用 <code>dataOutputStream</code> 的 <code>writeInt</code> 方法，将整数 <code>42</code> 写入文件。数据以字节形式存储，因此可以被其他 Java 程序读取。</li>\n</ul>\n</li>\n<li><strong><code>&#125; catch (IOException e) &#123;</code></strong>:<ul>\n<li>如果在 <code>try</code> 块中发生 <code>IOException</code>（例如，文件不可写，磁盘满等），程序将转入此 <code>catch</code> 块来处理异常。</li>\n<li><code>e</code> 是捕获的异常对象，代表发生的具体异常。</li>\n</ul>\n</li>\n<li><strong><code>System.err.println(&quot;写入文件时发生错误: &quot; + e.getMessage())</code></strong>:<ul>\n<li>输出错误消息到标准错误流，包含具体的异常信息。<code>e.getMessage()</code> 获取异常的详细信息，帮助开发者理解发生了什么错误。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"一般的try语句\"><a href=\"#一般的try语句\" class=\"headerlink\" title=\"一般的try语句\"></a>一般的try语句</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能会抛出异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可选的代码，无论是否发生异常都会执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用一般的try实现上面的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.DataOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileWriteExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;output.dat&quot;</span>; <span class=\"comment\">// 指定文件名</span></span><br><span class=\"line\">        <span class=\"type\">DataOutputStream</span> <span class=\"variable\">dataOutputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建 FileOutputStream 对象</span></span><br><span class=\"line\">            <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(fileName);</span><br><span class=\"line\">            <span class=\"comment\">// 创建 DataOutputStream 对象</span></span><br><span class=\"line\">            dataOutputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(fileOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 写入 int 类型数据</span></span><br><span class=\"line\">            dataOutputStream.writeInt(<span class=\"number\">42</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 写入 double 类型数据</span></span><br><span class=\"line\">            dataOutputStream.writeDouble(<span class=\"number\">3.14159</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 写入字符串</span></span><br><span class=\"line\">            dataOutputStream.writeUTF(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;数据已成功写入文件 &quot;</span> + fileName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;写入文件时发生错误: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 关闭 DataOutputStream</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataOutputStream != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    dataOutputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    System.err.println(<span class=\"string\">&quot;关闭 DataOutputStream 时发生错误: &quot;</span> + e.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>try-catch</strong>-finally:<ul>\n<li>用于捕获和处理异常。</li>\n<li>可以捕获在 <code>try</code> 块中抛出的异常，并在 <code>catch</code> 块中提供相应的处理逻辑。</li>\n<li>在 <code>finally</code> 块中确保在所有操作完成后正确关闭文件流，以释放资源。</li>\n</ul>\n</li>\n<li><strong>try-with-resources</strong>:<ul>\n<li>主要用于自动管理资源（如文件、数据库连接等）。</li>\n<li>确保在使用完资源后能够自动关闭它们，从而避免资源泄露。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编写读取数据的代码\"><a href=\"#编写读取数据的代码\" class=\"headerlink\" title=\"编写读取数据的代码\"></a>编写读取数据的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileReadExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;data.txt&quot;</span>;  <span class=\"comment\">// 定义要读取的文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取数据从文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataInputStream</span> <span class=\"variable\">dataInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(fileName))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 读取 int 类型数据</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">intValue</span> <span class=\"operator\">=</span> dataInputStream.readInt();</span><br><span class=\"line\">            <span class=\"comment\">// 读取 double 类型数据</span></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">doubleValue</span> <span class=\"operator\">=</span> dataInputStream.readDouble();</span><br><span class=\"line\">            <span class=\"comment\">// 读取字符串</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">stringValue</span> <span class=\"operator\">=</span> dataInputStream.readUTF();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 显示读取的数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;读取的数据：&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;int: &quot;</span> + intValue);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;double: &quot;</span> + doubleValue);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;String: &quot;</span> + stringValue);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;读取文件时发生错误: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总代码\"><a href=\"#总代码\" class=\"headerlink\" title=\"总代码\"></a>总代码</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileReadWriteExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;data.txt&quot;</span>;  <span class=\"comment\">// 定义要写入和读取的文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 写入数据到文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataOutputStream</span> <span class=\"variable\">dataOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(fileName))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 写入 int 类型数据</span></span><br><span class=\"line\">            dataOutputStream.writeInt(<span class=\"number\">42</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 写入 double 类型数据</span></span><br><span class=\"line\">            dataOutputStream.writeDouble(<span class=\"number\">3.14159</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 写入字符串</span></span><br><span class=\"line\">            dataOutputStream.writeUTF(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;数据已成功写入文件 &quot;</span> + fileName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;写入文件时发生错误: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取数据从文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataInputStream</span> <span class=\"variable\">dataInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(fileName))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 读取 int 类型数据</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">intValue</span> <span class=\"operator\">=</span> dataInputStream.readInt();</span><br><span class=\"line\">            <span class=\"comment\">// 读取 double 类型数据</span></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">doubleValue</span> <span class=\"operator\">=</span> dataInputStream.readDouble();</span><br><span class=\"line\">            <span class=\"comment\">// 读取字符串</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">stringValue</span> <span class=\"operator\">=</span> dataInputStream.readUTF();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 显示读取的数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;读取的数据：&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;int: &quot;</span> + intValue);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;double: &quot;</span> + doubleValue);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;String: &quot;</span> + stringValue);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;读取文件时发生错误: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三题：MyThread-类\"><a href=\"#第三题：MyThread-类\" class=\"headerlink\" title=\"第三题：MyThread 类\"></a>第三题：<code>MyThread</code> 类</h2><p>题目：<br>编写一个类 MyThread，它继承自 Thread 类：类中定义一个长整型变量delay；还定义有两个参数的构造方法，第 1 个参数 str 是 String 类型，通过 super(str)调用父类构造方法给线程命名，第 2 个参数 delay 是长整型，用来初始化类中的变量delay。<br>MyThread 类中的 run 方法如下实现：循环 3 次，每次先在命令行输出线程第几次运行，然后休眠 delay 毫秒，循环结束后输出该线程结束的信息。<br>编写应用程序TestThread.java，在其 main 方法中创建 MyThread 类的三个对象 t1、t2、t3，分别指定线程名字为“线程 A”、“线程 B”和“线程 C”，休眠时间为 1000 毫秒、2000 毫秒、3000 毫秒，并启动这三个线程，main 方法的最后输出当前活动线程的数目。</p>\n<h3 id=\"MyThread-java\"><a href=\"#MyThread-java\" class=\"headerlink\" title=\"MyThread.java\"></a>MyThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> delay; <span class=\"comment\">// 延迟时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造方法，接收线程名称和延迟时间</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThread</span><span class=\"params\">(String str, <span class=\"type\">long</span> delay)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(str); <span class=\"comment\">// 调用父类 Thread 的构造方法</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.delay = delay; <span class=\"comment\">// 初始化 delay</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环三次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(getName() + <span class=\"string\">&quot; 第 &quot;</span> + i + <span class=\"string\">&quot; 次运行&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(delay); <span class=\"comment\">// 线程休眠</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                System.err.println(getName() + <span class=\"string\">&quot; 被中断: &quot;</span> + e.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot; 结束&quot;</span>); <span class=\"comment\">// 线程结束信息</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TestThread-java\"><a href=\"#TestThread-java\" class=\"headerlink\" title=\"TestThread.java\"></a>TestThread.java</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建三个 MyThread 对象</span></span><br><span class=\"line\">        <span class=\"type\">MyThread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;线程 A&quot;</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"type\">MyThread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;线程 B&quot;</span>, <span class=\"number\">2000</span>);</span><br><span class=\"line\">        <span class=\"type\">MyThread</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>(<span class=\"string\">&quot;线程 C&quot;</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出当前活动线程的数目</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动线程的数目: &quot;</span> + Thread.activeCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"第四题：Soundable-接口\"><a href=\"#第四题：Soundable-接口\" class=\"headerlink\" title=\"第四题：Soundable 接口\"></a>第四题：Soundable 接口</h2><p>题目：设计和实现一个 Soundable 接口，该接口具有发声功能，同时还能够调节声音大小。Soundable接口的这些功能将会由3种声音设备来具体实现，它们分别是收音机 Radio、随身听Walkman和手机Mobilephone。最后还要设计一个应用程序类来使用这些实现了Soundable 接口的声音设备类。程序运行时，先询问用户想听哪种设备，然后程序就会按照该设备的工作方式来发出声音。</p>\n<h3 id=\"定义-Soundable-接口\"><a href=\"#定义-Soundable-接口\" class=\"headerlink\" title=\"定义 Soundable 接口\"></a>定义 Soundable 接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Soundable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span>;  <span class=\"comment\">// 发声方法</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">adjustVolume</span><span class=\"params\">(<span class=\"type\">int</span> level)</span>;  <span class=\"comment\">// 调节音量的方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Radio类\"><a href=\"#Radio类\" class=\"headerlink\" title=\"Radio类\"></a>Radio类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Radio</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Soundable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收音机正在播放音乐...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustVolume</span><span class=\"params\">(<span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        volume = level;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收音机音量调节为: &quot;</span> + volume);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Walkman-类\"><a href=\"#Walkman-类\" class=\"headerlink\" title=\"Walkman 类\"></a>Walkman 类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Walkman</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Soundable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;随身听正在播放音乐...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustVolume</span><span class=\"params\">(<span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        volume = level;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;随身听音量调节为: &quot;</span> + volume);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mobilephone-类\"><a href=\"#Mobilephone-类\" class=\"headerlink\" title=\"Mobilephone 类\"></a>Mobilephone 类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mobilephone</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Soundable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;手机正在播放铃声...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustVolume</span><span class=\"params\">(<span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        volume = level;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;手机音量调节为: &quot;</span> + volume);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Clock-类\"><a href=\"#Clock-类\" class=\"headerlink\" title=\"Clock 类\"></a>Clock 类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Soundable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;闹钟发出滴答声...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustVolume</span><span class=\"params\">(<span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        volume = level;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;闹钟音量调节为: &quot;</span> + volume);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建应用程序类\"><a href=\"#创建应用程序类\" class=\"headerlink\" title=\"创建应用程序类\"></a>创建应用程序类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SoundTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请选择设备 (1: 收音机, 2: 随身听, 3: 手机, 4: 闹钟): &quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">choice</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        Soundable device;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (choice) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                device = <span class=\"keyword\">new</span> <span class=\"title class_\">Radio</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                device = <span class=\"keyword\">new</span> <span class=\"title class_\">Walkman</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                device = <span class=\"keyword\">new</span> <span class=\"title class_\">Mobilephone</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                device = <span class=\"keyword\">new</span> <span class=\"title class_\">Clock</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;无效的选择。&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        device.makeSound(); <span class=\"comment\">// 发出声音</span></span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入音量(1-10): &quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">volumeLevel</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        device.adjustVolume(volumeLevel); <span class=\"comment\">// 调节音量</span></span><br><span class=\"line\"></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：<br>    (a)环境中进行编译，编译的结果将会产生哪些个class文件，分别是哪些？为什么？<br>    (b) 编译之后运行程序，观察所得结果。<br>    (c) 现在假定要为程序增加一个闹钟类Clock，该类也实现 Soundable 接口， 能够发出滴答声，请将以下的Clock类加入到测试类中，修改之后，重新编译并运行，记录结果。<br> a) 在 IntelliJ IDEA 中编译上述代码后，程序将生成以下 <code>.class</code> 文件：</p>\n<ol>\n<li><strong>Soundable.class</strong>：接口 <code>Soundable</code> 的编译结果。</li>\n<li><strong>Radio.class</strong>：类 <code>Radio</code> 的编译结果，它实现了 <code>Soundable</code> 接口。</li>\n<li><strong>Walkman.class</strong>：类 <code>Walkman</code> 的编译结果，它实现了 <code>Soundable</code> 接口。</li>\n<li><strong>Mobilephone.class</strong>：类 <code>Mobilephone</code> 的编译结果，它实现了 <code>Soundable</code> 接口。</li>\n<li><strong>Clock.class</strong>：类 <code>Clock</code> 的编译结果，它实现了 <code>Soundable</code> 接口。</li>\n<li><strong>SoundTest.class</strong>：主类 <code>SoundTest</code> 的编译结果，包含 <code>main</code> 方法并用于运行程序。</li>\n</ol>\n<p> (b) 运行程序观察结果<br>运行程序后，控制台将提示用户选择设备，程序将根据用户的选择发出对应的声音并调整音量。以下是一个可能的运行示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">请选择设备</span> <span class=\"string\">(1:</span> <span class=\"string\">收音机,</span> <span class=\"attr\">2:</span> <span class=\"string\">随身听,</span> <span class=\"attr\">3:</span> <span class=\"string\">手机,</span> <span class=\"attr\">4:</span> <span class=\"string\">闹钟):</span> </span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">随身听正在播放音乐...</span></span><br><span class=\"line\"><span class=\"string\">请输入音量(1-10):</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"string\">随身听音量调节为:</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p><strong>观察结果</strong>：</p>\n<ul>\n<li>程序根据用户输入的设备类型调用相应的 <code>makeSound()</code> 方法，输出不同的音效信息。</li>\n<li>用户输入的音量级别被传递给 <code>adjustVolume()</code> 方法，并显示相应的音量调整信息。</li>\n</ul>\n<p> (c) 增加 <code>Clock</code> 类并记录结果<br>假设 <code>Clock</code> 类的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Soundable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeSound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;闹钟发出滴答声...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustVolume</span><span class=\"params\">(<span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        volume = level;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;闹钟音量调节为: &quot;</span> + volume);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">请选择设备</span> <span class=\"string\">(1:</span> <span class=\"string\">收音机,</span> <span class=\"attr\">2:</span> <span class=\"string\">随身听,</span> <span class=\"attr\">3:</span> <span class=\"string\">手机,</span> <span class=\"attr\">4:</span> <span class=\"string\">闹钟):</span> </span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"string\">闹钟发出滴答声...</span></span><br><span class=\"line\"><span class=\"string\">请输入音量(1-10):</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"string\">闹钟音量调节为:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"附加题\"><a href=\"#附加题\" class=\"headerlink\" title=\"附加题\"></a>附加题</h2><p>题目：现在请模仿本实验的程序设计出一个自己的接口程序，要求先设计一个moveable 可移动接口，然后分别设计 3 个线程 , 即汽车 Car 、轮船 Ship 、飞机Aircraft 来实现该接口，在测试类中可以创建多个线程，启用线程完成各自的工作（用不同的方式创建这些线程。</p>\n<h3 id=\"Moveable-接口\"><a href=\"#Moveable-接口\" class=\"headerlink\" title=\"Moveable 接口\"></a><code>Moveable</code> 接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Moveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span>; <span class=\"comment\">// 定义一个方法，用于实现移动的对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Car-类\"><a href=\"#Car-类\" class=\"headerlink\" title=\"Car 类\"></a><code>Car</code> 类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Moveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Car</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name; <span class=\"comment\">// 通过构造函数传入汽车名称</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; 正在公路上行驶。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        move(); <span class=\"comment\">// 调用 move 方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ship-类\"><a href=\"#Ship-类\" class=\"headerlink\" title=\"Ship 类\"></a><code>Ship</code> 类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Moveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Ship</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name; <span class=\"comment\">// 通过构造函数传入轮船名称</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; 正在海上航行。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        move(); <span class=\"comment\">// 调用 move 方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Aircraft-类\"><a href=\"#Aircraft-类\" class=\"headerlink\" title=\"Aircraft 类\"></a><code>Aircraft</code> 类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Aircraft</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Moveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Aircraft</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name; <span class=\"comment\">// 通过构造函数传入飞机名称</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; 正在天空中飞行。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        move(); <span class=\"comment\">// 调用 move 方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TestMoveable-测试类\"><a href=\"#TestMoveable-测试类\" class=\"headerlink\" title=\"TestMoveable 测试类\"></a>TestMoveable 测试类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMoveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建汽车、轮船和飞机的实例</span></span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;汽车 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"string\">&quot;汽车 2&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Ship</span> <span class=\"variable\">ship1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ship</span>(<span class=\"string\">&quot;轮船 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Aircraft</span> <span class=\"variable\">aircraft1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Aircraft</span>(<span class=\"string\">&quot;飞机 1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">        car1.start();</span><br><span class=\"line\">        car2.start();</span><br><span class=\"line\">        ship1.start();</span><br><span class=\"line\">        aircraft1.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h2><table>\n<thead>\n<tr>\n<th><strong>问题</strong></th>\n<th><strong>答案</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>接口与抽象类的区别是什么？</strong></td>\n<td><strong>接口</strong>：只声明方法签名，不提供实现；支持多继承，一个类可以实现多个接口。<br><strong>抽象类</strong>：可以包含已实现的方法和属性；只支持单继承。</td>\n</tr>\n<tr>\n<td><strong>如何创建线程？有几种方法？</strong></td>\n<td><strong>方法 1</strong>：继承 <code>Thread</code> 类并重写 <code>run()</code> 方法，调用 <code>start()</code> 启动线程。<br><strong>方法 2</strong>：实现 <code>Runnable</code> 接口，将实例传给 <code>Thread</code> 构造器。</td>\n</tr>\n</tbody></table>\n<p>（2024.10.25）</p>\n","tags":["实验","java"]},{"title":"操作系统实验三","url":"/2024/11/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%89/","content":"<h1 id=\"实验三：存储器管理\"><a href=\"#实验三：存储器管理\" class=\"headerlink\" title=\"实验三：存储器管理\"></a>实验三：存储器管理</h1><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><p>本次实验旨在通过使用操作系统内存分配信息的动态观察以及存储器管理算法的实现，加深对内存分配原理的理解（重点加深对请求式分页存储管理方式的理解）。同时通过相关算法的实现，熟悉页面置换算法及其性能。</p>\n<h3 id=\"二、实验内容\"><a href=\"#二、实验内容\" class=\"headerlink\" title=\"二、实验内容\"></a>二、实验内容</h3><ol>\n<li>使用 taskmgr.exe 观察实验环境中的进程生命周期内系统内存分配变化情<br>况；</li>\n<li>编程实现请求分页管理方式时的地址变换过程；</li>\n<li>编程实现 OPT 或者 FIFO 算法</li>\n<li>编程实现 LRU 算法；</li>\n</ol>\n<h3 id=\"三、思考题\"><a href=\"#三、思考题\" class=\"headerlink\" title=\"三、思考题\"></a>三、思考题</h3><ol>\n<li>OPT 算法是否具备实用性？</li>\n<li>OPT 算法与 LRU 算法的区别是什么？</li>\n<li>虚拟存储器的主要特征有哪些？</li>\n</ol>\n<hr>\n<h2 id=\"一、地址转换过程实现\"><a href=\"#一、地址转换过程实现\" class=\"headerlink\" title=\"一、地址转换过程实现\"></a><strong>一、地址转换过程实现</strong></h2><p>请求分页管理方式时，需要将逻辑地址转换为物理地址。通常涉及页面号和偏移量的计算：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">addressTranslation</span><span class=\"params\">(<span class=\"type\">int</span> logicalAddress, <span class=\"type\">int</span> pageSize, <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; pageTable)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pageNumber = logicalAddress / pageSize;  <span class=\"comment\">// 页面号</span></span><br><span class=\"line\">    <span class=\"type\">int</span> offset = logicalAddress % pageSize;      <span class=\"comment\">// 偏移量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pageNumber &gt;= pageTable.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;错误：页号超出范围！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> physicalAddress = pageTable[pageNumber] * pageSize + offset;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> physicalAddress;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; pageTable = &#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>&#125;;  <span class=\"comment\">// 模拟页表</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pageSize = <span class=\"number\">1024</span>;                   <span class=\"comment\">// 假设页面大小为1024字节</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> logicalAddress = <span class=\"number\">2048</span>;  <span class=\"comment\">// 输入逻辑地址</span></span><br><span class=\"line\">    <span class=\"type\">int</span> physicalAddress = <span class=\"built_in\">addressTranslation</span>(logicalAddress, pageSize, pageTable);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (physicalAddress != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;逻辑地址 &quot;</span> &lt;&lt; logicalAddress &lt;&lt; <span class=\"string\">&quot; 对应的物理地址是：&quot;</span> &lt;&lt; physicalAddress &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<ol>\n<li>页表记录了每个页面在物理内存中的帧号。</li>\n<li>通过 <code>逻辑地址 / 页面大小</code> 得到页面号，<code>逻辑地址 % 页面大小</code> 得到偏移量。</li>\n<li>页表转换后返回物理地址。</li>\n</ol>\n<p>结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">逻辑地址 2048 对应的物理地址是：1024</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"二、FIFO-页面置换算法\"><a href=\"#二、FIFO-页面置换算法\" class=\"headerlink\" title=\"二、FIFO 页面置换算法\"></a><strong>二、FIFO 页面置换算法</strong></h2><p>FIFO（First-In-First-Out，先进先出）页面置换算法的逻辑是：</p>\n<ol>\n<li>页面进入内存后，它们会按顺序存入一个队列，最早进入的页面最先被替换。</li>\n<li>如果内存已满，当需要加载一个新的页面时，会将最早进入的页面（队列的第一个）移除，再将新的页面加入队列。</li>\n<li>每当访问的页面不在内存中（缺页）时，会触发一次缺页中断，并增加缺页次数。</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FIFOPageReplacement</span><span class=\"params\">(<span class=\"type\">int</span> pages[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">bool</span>&gt; s;  <span class=\"comment\">// 当前内存中的页（使用 map 实现）</span></span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; indexes; <span class=\"comment\">// 实现FIFO队列</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pageFaults = <span class=\"number\">0</span>; <span class=\"comment\">// 记录缺页次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历pages数组中的每个页面</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 count 检查页面是否在内存中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.<span class=\"built_in\">count</span>(pages[i]) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果内存已满</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() == capacity) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> val = indexes.<span class=\"built_in\">front</span>();  </span><br><span class=\"line\">                indexes.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">erase</span>(val);  <span class=\"comment\">// 从map中删除最早进入的页面</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 加入新页面</span></span><br><span class=\"line\">            s[pages[i]] = <span class=\"literal\">true</span>;  <span class=\"comment\">// map 插入新页面</span></span><br><span class=\"line\">            indexes.<span class=\"built_in\">push</span>(pages[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 增加缺页次数</span></span><br><span class=\"line\">            pageFaults++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;访问页面 &quot;</span> &lt;&lt; pages[i] &lt;&lt; <span class=\"string\">&quot;，当前内存：&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> page : s) cout &lt;&lt; page.first &lt;&lt; <span class=\"string\">&quot; &quot;</span>;  <span class=\"comment\">// 打印页面</span></span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;总缺页次数：&quot;</span> &lt;&lt; pageFaults &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pages[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>&#125;;  <span class=\"comment\">// 页面序列</span></span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">sizeof</span>(pages) / <span class=\"built_in\">sizeof</span>(pages[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity = <span class=\"number\">3</span>;  <span class=\"comment\">// 内存容量为 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">FIFOPageReplacement</span>(pages, n, capacity);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>部分代码解释：<br> <code>count()</code> 函数：</p>\n<ul>\n<li><code>s.count(pages[i])</code> 返回值：<ul>\n<li>如果页面 <code>pages[i]</code> 存在，返回 1。</li>\n<li>如果页面 <code>pages[i]</code> 不存在，返回 0。</li>\n</ul>\n</li>\n</ul>\n<p>结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">访问页面 1，当前内存：1</span><br><span class=\"line\">访问页面 3，当前内存：1 3</span><br><span class=\"line\">访问页面 0，当前内存：0 1 3</span><br><span class=\"line\">访问页面 3，当前内存：0 1 3</span><br><span class=\"line\">访问页面 5，当前内存：0 3 5</span><br><span class=\"line\">访问页面 6，当前内存：0 5 6</span><br><span class=\"line\">访问页面 3，当前内存：3 5 6</span><br><span class=\"line\">总缺页次数：6</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"三、OPT页面置换算法\"><a href=\"#三、OPT页面置换算法\" class=\"headerlink\" title=\"三、OPT页面置换算法\"></a>三、<strong>OPT页面置换算法</strong></h2><ol>\n<li><strong>原理</strong>：OPT算法的核心思想是，当内存已满且需要替换页面时，选择一个未来<strong>最晚被访问</strong>的页面进行替换，因为该页面将在最长时间内不会被访问，因此将其替换会减少未来的缺页次数。</li>\n</ol>\n<ul>\n<li><strong>判断是否需要置换</strong>：<ul>\n<li>当一个页面请求到达时，检查该页面是否已经在内存中。</li>\n<li>如果页面已经在内存中，继续下一请求；否则产生一次缺页中断。</li>\n</ul>\n</li>\n<li><strong>选择置换页面</strong>：<ul>\n<li>对每个在内存中的页面，预测其未来的访问情况。</li>\n<li>找出内存中未来最晚再被访问的页面（即在当前请求后最久才会再次被访问的页面）。</li>\n<li>将该页面替换成当前请求的页面。。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OPTPageReplacement</span><span class=\"params\">(<span class=\"type\">int</span> pages[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; s;  <span class=\"comment\">// 当前内存中的页</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pageFaults = <span class=\"number\">0</span>;  <span class=\"comment\">// 记录缺页次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查页面是否已经在内存中</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = <span class=\"built_in\">find</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>(), pages[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it == s.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 页面不在内存中，缺页发生</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() == capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 内存已满，找到未来最晚访问的页面并替换</span></span><br><span class=\"line\">                <span class=\"type\">int</span> farthest = <span class=\"number\">-1</span>, indexToReplace = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; s.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> nextUse = n;  <span class=\"comment\">// 假设页面不会再被访问</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (s[j] == pages[k]) &#123;</span><br><span class=\"line\">                            nextUse = k;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nextUse &gt; farthest) &#123;</span><br><span class=\"line\">                        farthest = nextUse;</span><br><span class=\"line\">                        indexToReplace = j;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                s[indexToReplace] = pages[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">push_back</span>(pages[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pageFaults++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;访问页面 &quot;</span> &lt;&lt; pages[i] &lt;&lt; <span class=\"string\">&quot;，当前内存：&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> page : s) cout &lt;&lt; page &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;总缺页次数：&quot;</span> &lt;&lt; pageFaults &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pages[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span> &#125;;  <span class=\"comment\">// 页面序列</span></span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">sizeof</span>(pages) / <span class=\"built_in\">sizeof</span>(pages[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity = <span class=\"number\">3</span>;  <span class=\"comment\">// 内存容量为 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">OPTPageReplacement</span>(pages, n, capacity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>核心代码部分：如何找到未来最晚访问的页面并替换</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() == capacity) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 内存已满，找到未来最晚访问的页面并替换</span></span><br><span class=\"line\">    <span class=\"type\">int</span> farthest = <span class=\"number\">-1</span>, indexToReplace = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; s.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> nextUse = n;  <span class=\"comment\">// 假设页面不会再被访问</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[j] == pages[k]) &#123;</span><br><span class=\"line\">                nextUse = k;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextUse &gt; farthest) &#123;</span><br><span class=\"line\">            farthest = nextUse;</span><br><span class=\"line\">            indexToReplace = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s[indexToReplace] = pages[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释：</p>\n<ol>\n<li><p>首先检查内存是否已满，只有在内存已满的情况下才会进行替换。</p>\n</li>\n<li><p>然后，通过遍历内存中的每个页面，找出它们在未来的访问序列中最后一次被访问的时间。</p>\n</li>\n<li><p>比较所有页面的最后访问时间，选择最晚被访问的页面进行替换。</p>\n</li>\n<li><p>最后，替换掉最晚访问的页面，并把当前页面加载到内存中。</p>\n</li>\n</ol>\n<p>详细：</p>\n<ul>\n<li><code>farthest</code> 用来记录未来最晚被访问的页面的访问时间索引。初始值设为 -1，因为我们假设没有页面被访问（较大的访问时间）。</li>\n<li><code>indexToReplace</code> 用来记录最晚被访问页面的索引。我们用它来确定替换哪个页面。</li>\n<li>for循环遍历当前内存中的所有页面</li>\n<li><code>nextUse</code> 记录页面 <code>s[j]</code> 在未来的下次访问时间。初始化为 <code>n</code>（表示页面从未访问），假设页面之后不会再被访问。</li>\n<li><code>for (int k = i + 1; k &lt; n; k++)</code> 这是一个内部循环，用来检查页面 <code>s[j]</code> 在未来的页面访问序列中的位置。</li>\n<li><code>if (s[j] == pages[k]) &#123; nextUse = k; break; &#125;</code> 如果当前内存中的页面 <code>s[j]</code> 与未来的页面 <code>pages[k]</code> 相同，表示页面 <code>s[j]</code> 在时间 <code>k</code> 被访问。我们将 <code>nextUse</code> 更新为 <code>k</code>，表示页面 <code>s[j]</code> 下次被访问的时间。</li>\n<li><code>if (nextUse &gt; farthest) &#123; farthest = nextUse; indexToReplace = j; &#125;</code>这个 <code>if</code> 判断找到了未来最晚被访问的页面。</li>\n</ul>\n<p>结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">访问页面 1，当前内存：1</span><br><span class=\"line\">访问页面 3，当前内存：1 3</span><br><span class=\"line\">访问页面 0，当前内存：1 3 0</span><br><span class=\"line\">访问页面 3，当前内存：1 3 0</span><br><span class=\"line\">访问页面 5，当前内存：5 3 0</span><br><span class=\"line\">访问页面 6，当前内存：6 3 0</span><br><span class=\"line\">访问页面 3，当前内存：6 3 0</span><br><span class=\"line\">总缺页次数：5</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"四、LRU-页面置换算法\"><a href=\"#四、LRU-页面置换算法\" class=\"headerlink\" title=\"四、LRU 页面置换算法\"></a><strong>四、LRU 页面置换算法</strong></h2><p>LRU 页面置换算法用于内存管理中，在页面调度时会优先替换最近最少使用的页面。算法的基本逻辑是：</p>\n<ol>\n<li><strong>当页面访问请求到来时</strong>：<ul>\n<li>如果页面在内存中，则直接访问并更新该页面的最近使用时间。</li>\n<li>如果页面不在内存中（缺页），则执行以下操作：<ul>\n<li>若内存未满，将页面直接加载到内存。</li>\n<li>若内存已满，找出最近最少使用的页面并将其替换。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>页面访问时间记录</strong>：LRU 需要跟踪每个页面的最后一次访问时间，用于找出需要替换的页面。</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span>  <span class=\"comment\">// for INT_MAX</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LRUPageReplacement</span><span class=\"params\">(<span class=\"type\">int</span> pages[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; indexes;  <span class=\"comment\">// 记录页面上次访问时间</span></span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">bool</span>&gt; s;       <span class=\"comment\">// 当前内存中的页</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pageFaults = <span class=\"number\">0</span>;               <span class=\"comment\">// 缺页次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// i 代表页面的访问顺序（时间），也就是当前访问的时刻或步骤索引</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前页不在内存中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.<span class=\"built_in\">count</span>(pages[i]) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果内存已满</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() == capacity) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> lru = INT_MAX, val;</span><br><span class=\"line\">                <span class=\"comment\">// 找到最久未使用的页面</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : s) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (indexes[it.first] &lt; lru) &#123;</span><br><span class=\"line\">                        lru = indexes[it.first];</span><br><span class=\"line\">                        val = it.first;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 替换最久未使用的页面</span></span><br><span class=\"line\">                s.<span class=\"built_in\">erase</span>(val);</span><br><span class=\"line\">                indexes.<span class=\"built_in\">erase</span>(val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 加入新页面</span></span><br><span class=\"line\">            s[pages[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 增加缺页次数</span></span><br><span class=\"line\">            pageFaults++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新当前页面的访问时间</span></span><br><span class=\"line\">        indexes[pages[i]] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;访问页面 &quot;</span> &lt;&lt; pages[i] &lt;&lt; <span class=\"string\">&quot;，当前内存：&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> page : s) cout &lt;&lt; page.first &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;总缺页次数：&quot;</span> &lt;&lt; pageFaults &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pages[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>&#125;;  <span class=\"comment\">// 页面序列</span></span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">sizeof</span>(pages) / <span class=\"built_in\">sizeof</span>(pages[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity = <span class=\"number\">3</span>;  <span class=\"comment\">// 内存容量为 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">LRUPageReplacement</span>(pages, n, capacity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>部分解释：</p>\n<ul>\n<li><code>unordered_map&lt;int, int&gt; indexes</code>: 用于记录页面的上次访问时间。<code>unordered_map</code> 允许将页面号映射到它的访问时间索引，即页面号作为键，访问时间作为值。</li>\n<li><code>unordered_map&lt;int, bool&gt; s</code>: 用于表示当前内存中的页面集合。页面号作为键，<code>bool</code> 值表示该页面是否在内存中。<code>unordered_map</code> 提供 O(1) 时间复杂度的查找，因此适合高效检查页面是否在内存中。</li>\n<li><code>indexes[it.first]</code> 表示 <code>indexes</code> 中以 <code>it.first</code>（页面号）作为键来查找对应的最近访问时间。</li>\n</ul>\n<p>结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">访问页面 1，当前内存：1</span><br><span class=\"line\">访问页面 3，当前内存：1 3</span><br><span class=\"line\">访问页面 0，当前内存：1 3 0</span><br><span class=\"line\">访问页面 3，当前内存：1 3 0</span><br><span class=\"line\">访问页面 5，当前内存：3 0 5</span><br><span class=\"line\">访问页面 6，当前内存：3 5 6</span><br><span class=\"line\">访问页面 3，当前内存：3 5 6</span><br><span class=\"line\">总缺页次数：5</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h2><ol>\n<li><p><strong>OPT 算法是否具备实用性？</strong></p>\n<ul>\n<li><strong>OPT（Optimal）算法</strong>理论上是最优的，因为它总是淘汰未来最晚被访问的页面。然而在实际系统中无法预知未来，因此 OPT 算法不具备实用性。</li>\n</ul>\n</li>\n<li><p><strong>OPT 算法与 LRU 算法的区别是什么？</strong></p>\n<ul>\n<li><strong>OPT 算法</strong>根据未来的页面访问情况进行页面替换，而<strong>LRU 算法</strong>根据过去的页面访问记录来进行替换。OPT 是理想状态，而 LRU 是可实现的近似方案。</li>\n</ul>\n</li>\n<li><p><strong>虚拟存储器的主要特征有哪些？</strong></p>\n<ul>\n<li>虚拟存储器的特征包括：程序可以不完全装入内存即可运行；通过页表实现虚拟地址和物理地址的映射；通过页面置换技术提高内存利用率。</li>\n</ul>\n</li>\n</ol>\n","tags":["实验","操作系统"]}]